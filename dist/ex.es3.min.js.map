{"version":3,"sources":["_version.ts","polyfill/Array_isArray.ts","enumerable.ts","polyfill/Enumerable_iterator.ts","map/map.es3.ts","apply.ts","ex.es3.js","array.ts","concat.ts","distinct.ts","except.ts","fromJson.ts","groupBy.ts","intersect.ts","join.ts","list.ts","orderBy.ts","range.ts","reverse.ts","round.ts","select.ts","selector.ts","skip.ts","take.ts","traverse.ts","union.ts","where.ts","wrap.ts","zip.ts"],"names":["exjs","Object","prototype","toString","call","arg","exjs.Enumerable","exjs.Enumerable.getEnumerator","exjs.Enumerable.aggregate","exjs.Enumerable.all","exjs.Enumerable.any","exjs.Enumerable.apply","exjs.Enumerable.at","exjs.Enumerable.average","t","Error","exjs.Enumerable.concat","exjs.Enumerable.count","exjs.Enumerable.difference","f2","s2","exjs.Enumerable.distinct","exjs.Enumerable.except","exjs.Enumerable.first","exjs.Enumerable.firstIndex","exjs.Enumerable.forEach","exjs.Enumerable.groupBy","exjs.Enumerable.intersect","exjs.Enumerable.join","exjs.Enumerable.last","exjs.Enumerable.lastIndex","exjs.Enumerable.max","exjs.Enumerable.min","exjs.Enumerable.orderBy","exjs.Enumerable.orderByDescending","exjs.Enumerable.reverse","exjs.Enumerable.select","exjs.Enumerable.selectMany","exjs.Enumerable.skip","exjs.Enumerable.skipWhile","exjs.Enumerable.standardDeviation","exjs.Enumerable.sum","exjs.Enumerable.take","exjs.Enumerable.takeWhile","exjs.Enumerable.traverse","exjs.Enumerable.traverseUnique","exjs.Enumerable.toArray","exjs.Enumerable.toMap","exjs.Enumerable.toList","exjs.Enumerable.union","exjs.Enumerable.where","exjs.Enumerable.zip","Symbol","exjs.iteratorFromEnumerable","exjs.iteratorFromEnumerable.next","iteratorFromEnumerable","this","exjs.Map3","exjs.Map3.constructor","exjs.Map3.clear","exjs.Map3.delete","exjs.Map3.entries","exjs.Map3.forEach","exjs.Map3.get","exjs.Map3.has","exjs.Map3.keys","exjs.Map3.set","exjs.Map3.values","m","Map3","en","getEnumerator","moveNext","set","keySelector","current","valueSelector","_global","Map","window","global","exjs.applyEnumerator","prev","action","e","i","_this","Enumerable","applyEnumerator","__extends","d","b","__","constructor","p","hasOwnProperty","exjs.arrayEnumerator","index","len","undefined","arr","exjs.en","exjs.ArrayEnumerable","exjs.ArrayEnumerable.constructor","arrayEnumerator","slice","exjs.concatEnumerator","s","second","Array","concatEnumerator","exjs.distinctEnumerator","comparer","visited","indexOf","push","length","hit","distinctEnumerator","exjs.exceptEnumerator","f","x","exceptEnumerator","Function","fromJson","o","mappingOverrides","mapSubProperty","j","mapping","rv","mapped","key","$jsonMappings","exjs.groupByEnumerator","grps","createGroups","exjs.createGroups","k1","k2","exjs.Group","exjs.Group.constructor","exjs.Group._add","groupByEnumerator","exjs.intersectEnumerator","distinct","intersectEnumerator","exjs.joinEnumerator","ins","inner","toArray","cur","outerKeySelector","innerKeySelector","resultSelector","joinEnumerator","exjs.___","l","List","enumerator","exjs.List","exjs.List.constructor","exjs.List.toString","exjs.List.toLocaleString","exjs.List.pop","exjs.List.push","exjs.List.shift","exjs.List.slice","exjs.List.sort","exjs.List.splice","exjs.List.unshift","exjs.List.indexOf","exjs.List.lastIndexOf","exjs.List.every","exjs.List.some","exjs.List.forEach","exjs.List.map","exjs.List.filter","exjs.List.reduce","exjs.List.reduceRight","exjs.List.remove","exjs.List.removeWhere","list","removeWhere","item","any","removed","predicate","splice","reverse","exjs.orderByEnumerable","exjs.OrderedEnumerable","exjs.OrderedEnumerable.constructor","exjs.OrderedEnumerable.getEnumerator","source","sort","sorter","exjs.OrderedEnumerable.thenBy","exjs.OrderedEnumerable.thenByDescending","exjs.ThenEnumerable","exjs.ThenEnumerable.constructor","orderByEnumerable","exjs.rangeEnumerator","increment","end","exjs.range","exjs.reverseEnumerator","a","reverseEnumerator","exjs.round","exjs.selectEnumerator","selector","exjs.selectManyEnumerator","active","selectorEnumerator","selectEnumerator","selectManyEnumerator","exjs.selectorEnumerator","exjs.skipEnumerator","count","exjs.skipWhileEnumerator","skipEnumerator","skipWhileEnumerator","exjs.takeEnumerator","exjs.takeWhileEnumerator","takeEnumerator","takeWhileEnumerator","exjs.traverseEnumerator","exjs.traverseEnumerator.moveNext","exjs.traverseUniqueEnumerator","exjs.traverseUniqueEnumerator.moveNext","traverseEnumerator","existing","matcher","traverseUniqueEnumerator","some","exjs.unionEnumerator","unionEnumerator","exjs.whereEnumerator","c","filter","whereEnumerator","wrapEnumerator","enu","exjs.wrapEnumerator","wrapped","ex","exjs.zipEnumerator","zipEnumerator"],"mappings":"AAAA,GAAOA,OAAP,SAAOA,GACQA,EAAAA,QAAUA,SADlBA,OAAAA,SCAP,IAAOA,OAAP,SAAOA,GACEA,MAAMA,UACPA,MAAMA,QAAUA,SAAUA,GACtB,MAA+C,mBAAxCC,OAAOC,UAAUC,SAASC,KAAKC,MAH3CL,OAAAA,SCAP,IAAOA,OAAP,SAAOA,GAiIHA,GAAAA,GAAAA,WACIM,QAAAA,MAiUJA,MA9TIA,GAAAA,UAAAA,cAAAA,WACIC,OACIA,SAAUA,WACN,OAAO,GAEXA,QAASA,SAIjBD,EAAAA,UAAAA,UAAAA,SAAuBA,EAAmBA,GAEtCE,IAAKA,GADDA,GAASA,EACJA,EAAaA,KAAKA,gBAAiBA,EAAWA,YACnDA,EAASA,EAAYA,EAAQA,EAAWA,QAE5CA,OAAOA,IAGXF,EAAAA,UAAAA,IAAAA,SAAKA,GACDG,GAAIA,EAGAA,IAFAA,GAAIA,GAAIA,KAAKA,gBACTA,EAAIA,EACDA,EAAEA,YAAYA,CACjBA,IAAKA,EAAUA,EAAEA,QAASA,GACtBA,OAAOA,CACXA,KAGRA,OAAOA,GAGXH,EAAAA,UAAAA,IAAAA,SAAKA,GAGDI,IAFAA,GAAIA,GAAIA,KAAKA,gBACTA,EAAIA,EACDA,EAAEA,YAAYA,CACjBA,IAAKA,EACDA,OAAOA,CACXA,IAAIA,EAAUA,EAAEA,QAASA,GACrBA,OAAOA,CACXA,KAEJA,OAAOA,GAGXJ,EAAAA,UAAAA,MAAAA,SAASA,GACLK,KAAMA,IAAIA,OAAMA,oBAGpBL,EAAAA,UAAAA,GAAAA,SAAIA,GAGAM,IAFAA,GAAIA,GAAIA,KAAKA,gBACTA,EAAIA,EACDA,EAAEA,YAAYA,CACjBA,GAAIA,IAAMA,EACNA,MAAOA,GAAEA,OACbA,KAEJA,MAAOA,SAGXN,EAAAA,UAAAA,QAAAA,SAASA,GACLO,GAAIA,GAAQA,EACRA,EAAQA,CACZA,GAAWA,GAAYA,SAAUA,GACzB,GAAiB,gBAANC,GAAgB,KAAM,IAAIC,OAAM,0BAC3C,OAAoBD,GAG5BD,KADAA,GAAIA,GAAIA,KAAKA,gBACNA,EAAEA,YACLA,GAASA,EAASA,EAAEA,SACpBA,GAEJA,OAAcA,KAAVA,EAAoBA,EACjBA,EAAQA,GAKnBP,EAAAA,UAAAA,OAAAA,SAAQA,GACJU,KAAMA,IAAIA,OAAMA,oBAGpBV,EAAAA,UAAAA,MAAAA,SAAOA,GAGHW,IAFAA,GAAIA,GAAQA,EACRA,EAAIA,KAAKA,gBACNA,EAAEA,cACAA,GAAaA,EAAUA,EAAEA,WAC1BA,GAERA,OAAOA,IAKXX,EAAAA,UAAAA,WAAAA,SAAYA,EAAaA,GAMrBY,MALAA,GAAWA,GAAYA,SAAUA,EAAOA,GAChC,MAAOC,KAAOC,GAElBF,YAAkBA,SAClBA,EAASA,EAAOA,OAEhBA,aAAcA,KAAKA,UAAUA,EAAQA,GAAUA,UAAUA,KACzDA,MAAOA,KAAKA,OAAOA,EAAQA,GAAUA,UAAUA,KAC/CA,MAAOA,EAAOA,OAAOA,KAAMA,GAAUA,UAAUA,OAIvDZ,EAAAA,UAAAA,SAAAA,SAAUA,GACNe,KAAMA,IAAIA,OAAMA,oBAKpBf,EAAAA,UAAAA,OAAAA,SAAQA,EAAaA,GACjBgB,KAAMA,IAAIA,OAAMA,oBAGpBhB,EAAAA,UAAAA,MAAAA,SAAOA,GAEHiB,IADAA,GAAIA,GAAIA,KAAKA,gBACNA,EAAEA,YACLA,IAAKA,GAASA,EAAMA,EAAEA,SAClBA,MAAOA,GAAEA,OAEjBA,OAAOA,SAGXjB,EAAAA,UAAAA,WAAAA,SAAYA,GACRkB,IAAKA,GAAIA,GAAIA,KAAKA,gBAAiBA,EAAIA,EAAGA,EAAEA,WAAYA,IACpDA,IAAKA,GAASA,EAAMA,EAAEA,SAClBA,MAAOA,EAEfA,OAAOA,IAGXlB,EAAAA,UAAAA,QAAAA,SAASA,GACLmB,IAAKA,GAAIA,GAAKA,KAAKA,gBAAiBA,EAAGA,YACnCA,EAAOA,EAAGA,UAIlBnB,EAAAA,UAAAA,QAAAA,SAAcA,EAA6BA,GACvCoB,KAAMA,IAAIA,OAAMA,oBAKpBpB,EAAAA,UAAAA,UAAAA,SAAWA,EAAaA,GACpBqB,KAAMA,IAAIA,OAAMA,oBAKpBrB,EAAAA,UAAAA,KAAAA,SAA4BA,EAAYA,EAAkCA,EAAuCA,EAA8CA,GAC3JsB,KAAMA,IAAIA,OAAMA,oBAGpBtB,EAAAA,UAAAA,KAAAA,SAAMA,GAGFuB,IAFAA,GACIA,GADAA,EAAIA,KAAKA,gBAENA,EAAEA,cACAA,GAASA,EAAMA,EAAEA,YAClBA,EAAIA,EAAEA,QAEdA,OAAOA,IAGXvB,EAAAA,UAAAA,UAAAA,SAAWA,GAEPwB,IAAKA,GADDA,GAAIA,GACCA,EAAIA,KAAKA,gBAAiBA,EAAIA,EAAGA,EAAEA,WAAYA,MAC/CA,GAASA,EAAMA,EAAEA,YAClBA,EAAIA,EAEZA,OAAOA,IAGXxB,EAAAA,UAAAA,IAAAA,SAAKA,GACDyB,GAAIA,GAAIA,KAAKA,eACbA,KAAKA,EAAEA,WACHA,MAAOA,EACXA,GAAWA,GAAYA,SAAUA,GACzB,GAAiB,gBAANjB,GAAgB,KAAM,IAAIC,OAAM,0BAC3C,OAAoBD,GAG5BiB,KADAA,GAAIA,GAAMA,EAASA,EAAEA,SACdA,EAAEA,YACLA,EAAMA,KAAKA,IAAIA,EAAKA,EAASA,EAAEA,SAEnCA,OAAOA,IAGXzB,EAAAA,UAAAA,IAAAA,SAAKA,GACD0B,GAAIA,GAAIA,KAAKA,eACbA,KAAKA,EAAEA,WACHA,MAAOA,EACXA,GAAWA,GAAYA,SAAUA,GACzB,GAAiB,gBAANlB,GAAgB,KAAM,IAAIC,OAAM,0BAC3C,OAAoBD,GAG5BkB,KADAA,GAAIA,GAAMA,EAASA,EAAEA,SACdA,EAAEA,YACLA,EAAMA,KAAKA,IAAIA,EAAKA,EAASA,EAAEA,SAEnCA,OAAOA,IAGX1B,EAAAA,UAAAA,QAAAA,SAAcA,EAA6BA,GACvC2B,KAAMA,IAAIA,OAAMA,oBAGpB3B,EAAAA,UAAAA,kBAAAA,SAAwBA,EAA6BA,GACjD4B,KAAMA,IAAIA,OAAMA,oBAGpB5B,EAAAA,UAAAA,QAAAA,WACI6B,KAAMA,IAAIA,OAAMA,oBAGpB7B,EAAAA,UAAAA,OAAAA,SAAgBA,GACZ8B,KAAMA,IAAIA,OAAMA,oBAKpB9B,EAAAA,UAAAA,WAAAA,SAAoBA,GAChB+B,KAAMA,IAAIA,OAAMA,oBAGpB/B,EAAAA,UAAAA,KAAAA,SAAMA,GACFgC,KAAMA,IAAIA,OAAMA,oBAGpBhC,EAAAA,UAAAA,UAAAA,SAAWA,GACPiC,KAAMA,IAAIA,OAAMA,oBAGpBjC,EAAAA,UAAAA,kBAAAA,SAAmBA,GACfkC,GAAIA,GAAMA,KAAKA,QAAQA,GACnBA,EAAMA,EACNA,EAAQA,CACZA,GAAWA,GAAYA,SAAUA,GACzB,GAAiB,gBAAN1B,GAAgB,KAAM,IAAIC,OAAM,0BAC3C,OAAoBD,GAG5B0B,KADAA,GAAIA,GAAIA,KAAKA,gBACNA,EAAEA,YAAYA,CACjBA,GAAIA,GAAOA,EAASA,EAAEA,SAAWA,CACjCA,IAAQA,EAAOA,EACfA,IAEJA,MAAOA,MAAKA,KAAKA,EAAMA,IAG3BlC,EAAAA,UAAAA,IAAAA,SAAKA,GACDmC,GAAIA,GAAMA,CACVA,GAAWA,GAAYA,SAAUA,GACzB,GAAiB,gBAAN3B,GAAgB,KAAM,IAAIC,OAAM,0BAC3C,OAAoBD,GAG5B2B,KADAA,GAAIA,GAAIA,KAAKA,gBACNA,EAAEA,YACLA,GAAOA,EAASA,EAAEA,QAEtBA,OAAOA,IAGXnC,EAAAA,UAAAA,KAAAA,SAAMA,GACFoC,KAAMA,IAAIA,OAAMA,oBAGpBpC,EAAAA,UAAAA,UAAAA,SAAWA,GACPqC,KAAMA,IAAIA,OAAMA,oBAKpBrC,EAAAA,UAAAA,SAAAA,SAAUA,GACNsC,KAAMA,IAAIA,OAAMA,oBAKpBtC,EAAAA,UAAAA,eAAAA,SAAgBA,EAAeA,GAC3BuC,KAAMA,IAAIA,OAAMA,oBAGpBvC,EAAAA,UAAAA,QAAAA,WAGIwC,IAFAA,GAAIA,MACAA,EAAaA,KAAKA,gBACfA,EAAWA,YACdA,EAAIA,KAAKA,EAAWA,QAExBA,OAAOA,IAGXxC,EAAAA,UAAAA,MAAAA,SAAoBA,EAA6BA,GAC7CyC,KAAMA,IAAIA,OAAMA,oBAGpBzC,EAAAA,UAAAA,OAAAA,WACI0C,KAAMA,IAAIA,OAAMA,oBAQpB1C,EAAAA,UAAAA,MAAAA,SAAOA,EAAaA,GAChB2C,KAAMA,IAAIA,OAAMA,oBAGpB3C,EAAAA,UAAAA,MAAAA,SAAOA,GACH4C,KAAMA,IAAIA,OAAMA,oBAKpB5C,EAAAA,UAAAA,IAAAA,SAAsBA,EAAaA,GAC/B6C,KAAMA,IAAIA,OAAMA,oBAExB7C,IAlUaN,GAAAA,WAAUA,GAjIpBA,OAAAA,SCEP,IAAIoD,QAUGpD,MAAP,SAAOA,GAOHA,QAAAA,GAAmCA,GAC/BqD,GAAIA,EACJA,QACIA,KAAIA,WACAC,GAAIA,IACAA,MAAMA,EACNA,MAAOA,OAEXA,OAAKA,KAELA,EAAKA,GAAMA,EAAIA,kBAGfA,EAAIA,MAAQA,EAAGA,WACfA,EAAIA,MAAQA,EAAGA,QACRA,GANIA,IAfnBtD,QAAUA,OAAOA,WACjBA,EAAAA,WAAWA,UAAUA,OAAOA,UAAYA,WACpC,MAAOuD,GAA4BC,SAHxCxD,OAAAA,SCPP,IAAOA,OAAP,SAAOA,GACHA,GAAAA,GAAAA,WAQIyD,QAAAA,GAAYA,GAPZC,KAAAA,KAAeA,EACPA,KAAAA,SACAA,KAAAA,UAMJA,IAAIA,EAOJA,IANIA,YAAsBA,OACtBA,EAAqBA,EAAYA,KAC1BA,GAAcA,EAAWA,wBAAyBA,YACzDA,EAA0BA,GAGzBA,EAELA,IAAKA,GAAIA,GAAKA,EAAIA,gBAAiBA,GAAMA,EAAGA,YACxCA,KAAKA,IAAIA,EAAGA,QAAQA,GAAIA,EAAGA,QAAQA,IA4D/CD,MAxDIA,GAAAA,UAAAA,MAAAA,WACIE,KAAKA,MAAMA,OAASA,EACpBA,KAAKA,QAAQA,OAASA,EACtBA,KAAKA,KAAOA,GAGhBF,EAAAA,UAAAA,UAAAA,SAAOA,GACHG,GAAIA,GAAQA,KAAKA,MAAMA,QAAQA,EAC/BA,OAAMA,GAAQA,IAEdA,KAAKA,MAAMA,OAAOA,EAAOA,GACzBA,KAAKA,QAAQA,OAAOA,EAAOA,GAC3BA,KAAKA,QACEA,IAJIA,GAOfH,EAAAA,UAAAA,QAAAA,WAAAI,GAAAA,GAAAA,IACIA,OAAOA,GAAKA,MAAMA,EAAGA,KAAKA,MAAMA,OAAOA,SAAAA,GAAKA,OAACA,EAAKA,MAAMA,GAAIA,EAAKA,QAAQA,OAG7EJ,EAAAA,UAAAA,QAAAA,SAAQA,EAA0EA,GAC/DK,MAAXA,IACAA,EAAUA,KACdA,KAAKA,GAAIA,GAAIA,EAAGA,EAAOA,KAAKA,MAAOA,EAAOA,KAAKA,QAASA,EAAMA,EAAKA,OAAYA,EAAJA,EAASA,IAChFA,EAAWA,KAAKA,EAASA,EAAKA,GAAIA,EAAKA,GAAIA,OAInDL,EAAAA,UAAAA,IAAAA,SAAIA,GACAM,GAAIA,GAAQA,KAAKA,MAAMA,QAAQA,EAC/BA,OAAOA,MAAKA,QAAQA,IAGxBN,EAAAA,UAAAA,IAAAA,SAAIA,GACAO,MAAOA,MAAKA,MAAMA,QAAQA,GAAOA,IAGrCP,EAAAA,UAAAA,KAAAA,WACIQ,MAAOA,MAAKA,MAAMA,MAGtBR,EAAAA,UAAAA,IAAAA,SAAIA,EAAWA,GACXS,GAAIA,GAAQA,KAAKA,MAAMA,QAAQA,EAQ/BA,aAPIA,EAAQA,GACRA,KAAKA,QAAQA,GAASA,GAEtBA,KAAKA,MAAMA,KAAKA,GAChBA,KAAKA,QAAQA,KAAKA,GAClBA,KAAKA,UAKbT,EAAAA,UAAAA,OAAAA,WACIU,MAAOA,MAAKA,QAAQA,MAE5BV,IA/EazD,GAAAA,KAAIA,EAiFjBA,EAAAA,WAAWA,UAAUA,MAAQA,SAA2BA,EAA6BA,GAEjF,IAAK,GADDoE,GAAI,GAAIC,GACHC,EAAKd,KAAKe,gBAAiBD,EAAGE,YACnCJ,EAAEK,IAAIC,EAAYJ,EAAGK,SAAUC,EAAcN,EAAGK,SAEpD,OAAOP,IAEPpE,EAAAA,OACAA,EAAAA,KAAKA,UAAUA,MAAQA,EAAAA,WAAWA,UAAUA,QA1F7CA,OAAAA,UA6FP,SAAW6E,GACFA,EAAQC,MACTD,EAAQC,IAAM9E,KAAKqE,OACN,mBAAXU,QAAyBC,OAASD,OCnG5C,IAAO/E,OAAP,SAAOA,GACHA,QAAAA,GAA4BA,EAAsBA,GAC9CiF,GAAIA,GACAA,EAAIA,EACJA,GACAA,QAASA,OACTA,SAAUA,WAEN,MADKnE,KAAGA,EAAIoE,EAAKX,iBACZzD,EAAE0D,YACPW,EAAOC,EAAET,QAAU7D,EAAE6D,QAASU,GAC9BA,KACO,IAHmB,GAMlCJ,OAAOA,GAGXjF,EAAAA,WAAWA,UAAUA,MAAQA,SAAYA,GAAZ,GAAAsF,GAAA9B,KACrB4B,EAAI,GAAIpF,GAAAuF,UAEZ,OADAH,GAAEb,cAAgB,WAAM,MAAAiB,GAAgCF,EAAMH,IACvDC,GAEPpF,EAAAA,OACAA,EAAAA,KAAKA,UAAUA,MAAQA,EAAAA,WAAWA,UAAUA,QAvB7CA,OAAAA,SC2aP,IAAIyF,WAAajC,MAAQA,KAAKiC,WAAc,SAAUC,EAAGC,GAErD,QAASC,KAAOpC,KAAKqC,YAAcH,EADnC,IAAK,GAAII,KAAKH,GAAOA,EAAEI,eAAeD,KAAIJ,EAAEI,GAAKH,EAAEG,GAEnDF,GAAG1F,UAAYyF,EAAEzF,UACjBwF,EAAExF,UAAY,GAAI0F,IC3af5F,MAAP,SAAOA,GACHA,QAAAA,GAA4BA,GACxBgG,GAAIA,GAAMA,EAAIA,OACVA,GAAKA,SAAUA,OAAWA,QAASA,QACnCA,EAAQA,EAUZA,OATAA,GAAEA,SAAWA,WAET,MADAC,KACIA,GAASC,GACTd,EAAET,QAAUwB,QACL,IAEXf,EAAET,QAAUyB,EAAIH,IACT,IAEJD,EAgBXhG,QAAAA,KACIqG,MAAIA,OAAQA,MAAMA,QAAQA,MACfA,GAAIA,GAAmBA,MAC3BA,GAAIA,GAAAA,WAhBfrG,GAAAA,GAAAA,SAAAA,GACIsG,QAAAA,GAAYA,GACRC,EAAAA,KAAAA,MAEAA,KAAKA,cAAgBA,WACjB,MAAOC,GAAgBJ,IAE3BG,KAAKA,QAAUA,WACX,MAAOH,GAAIK,MAAM,IAG7BH,MAXiCA,WAAAA,EAAAA,GAWjCA,GAXiCtG,EAAAA,WAmBjCA,KACIA,OAAOA,eAAeA,MAAMA,UAAWA,MACnCA,MAAOA,EACPA,YAAYA,EACZA,UAAUA,EACVA,cAAcA,IAEpBA,MAAOA,GAECA,MAAMA,UAAWA,GAAKA,IA7C7BA,OAAAA,SCJP,IAAOA,OAAP,SAAOA,GACHA,QAAAA,GAA6BA,EAAqBA,GAC9C0G,GAAIA,GACAA,GAAIA,EACJA,GACAA,QAASA,OACTA,SAAUA,WAGN,MAFK5F,KAAGA,EAAIoE,EAAKX,iBACjBa,EAAET,QAAUwB,OACRrF,EAAE0D,YACFY,EAAET,QAAU7D,EAAE6D,SACP,GAEPgC,GAAU,GACdA,GAAI,EACJ7F,EAAI8F,EAAOrC,gBACNzD,EAAE0D,YAEPY,EAAET,QAAU7D,EAAE6D,SACP,IAFI,IAKnB+B,OAAOA,GAGX1G,EAAAA,WAAWA,UAAUA,OAASA,SAAYA,GAAZ,GAAAsF,GAAA9B,KACtBc,EAAoBsC,YAAkBC,OAAQD,EAAOtC,KAAOsC,EAC5DxB,EAAI,GAAIpF,GAAAuF,UAEZ,OADAH,GAAEb,cAAgB,WAAM,MAAAuC,GAAoCxB,EAAMhB,IAC3Dc,GAEPpF,EAAAA,OACAA,EAAAA,KAAKA,UAAUA,OAASA,EAAAA,WAAWA,UAAUA,SAhC9CA,OAAAA,SCAP,IAAOA,OAAP,SAAOA,GACHA,QAAAA,GAA+BA,EAAsBA,GACjD+G,GAAIA,GACAA,KACAA,GACAA,QAASA,OACTA,SAAUA,WAGN,GAFKjG,IAAGA,EAAIoE,EAAKX,iBACjBa,EAAET,QAAUwB,QACPa,EAAU,CACX,KAAOlG,EAAE0D,YACL,GAAIyC,EAAQC,QAAQpG,EAAE6D,SAAW,EAE7B,MADAsC,GAAQE,KAAK/B,EAAET,QAAU7D,EAAE6D,UACpB,CAGf,QAAO,EAGX,KAAO7D,EAAE0D,YAAY,CACjB,IAAK,GAAIa,GAAI,EAAGa,EAAMe,EAAQG,OAAQC,GAAM,EAAWnB,EAAJb,IAAYgC,EAAKhC,IAChEgC,IAAQL,EAASC,EAAQ5B,GAAIvE,EAAE6D,QAEnC,KAAK0C,EAED,MADAJ,GAAQE,KAAK/B,EAAET,QAAU7D,EAAE6D,UACpB,EAGf,OAAO,GAGfoC,OAAOA,GAGX/G,EAAAA,WAAWA,UAAUA,SAAWA,SAAYA,GAAZ,GAAAsF,GAAA9B,KACxB4B,EAAI,GAAIpF,GAAAuF,UAEZ,OADAH,GAAEb,cAAgB,WAAM,MAAA+C,GAAmChC,EAAM0B,IAC1D5B,GAEPpF,EAAAA,OACAA,EAAAA,KAAKA,UAAUA,SAAWA,EAAAA,WAAWA,UAAUA,WAxChDA,OAAAA,SCAP,IAAOA,OAAP,SAAOA,GACHA,QAAAA,GAA6BA,EAAsBA,EAAwBA,GACvEuH,EAAWA,GAAYA,SAAUA,EAAMA,GACnC,MAAOC,KAAMb,EAEjBY,IAAIA,GACAA,GACAA,QAASA,OACTA,SAAUA,WAGN,IAFKzG,IAAGA,EAAIoE,EAAKX,iBACjBa,EAAET,QAAUwB,OACLrF,EAAE0D,YAAY,CACjB,IAAK,GAAI6C,IAAM,EAAOI,EAAIb,EAAOrC,gBAAiBkD,EAAEjD,aAAe6C,GAC/DA,EAAML,EAASlG,EAAE6D,QAAS8C,EAAE9C,QAEhC,KAAK0C,EAED,MADAjC,GAAET,QAAU7D,EAAE6D,SACP,EAGf,OAAO,GAGf4C,OAAOA,GAGXvH,EAAAA,WAAWA,UAAUA,OAASA,SAAYA,EAAaA,GAAzB,GAAAsF,GAAA9B,KACtBc,EAAqBsC,YAAkBC,OAAQD,EAAOtC,KAAOsC,EAC7DxB,EAAI,GAAIpF,GAAAuF,UAEZ,OADAH,GAAEb,cAAgB,WAAM,MAAAmD,GAAiCpC,EAAMhB,EAAI0C,IAC5D5B,GAEPpF,EAAAA,OACAA,EAAAA,KAAKA,UAAUA,OAASA,EAAAA,WAAWA,UAAUA,SAjC9CA,OAAAA,UCEP2H,SAASzH,UAAU0H,SAAW,SAAYC,EAAQC,GAiC9C,QAAAC,GAAwBC,EAAQC,GAC5BF,GAASA,MAALA,EACAA,MAAOA,EACXA,IAAIA,YAAmBA,UACnBA,MAAOA,GAAQA,EACnBA,IAAIA,YAAmBA,OAAOA,CAE1BA,GADAA,EAAUA,EAAQA,KACZA,YAAmBA,WAAeA,YAAaA,QACjDA,MAAOA,OAEXA,KAAKA,GADDA,MACKA,EAAIA,EAAGA,EAAIA,EAAEA,OAAQA,IAC1BA,EAAIA,KAAKA,EAAQA,EAAEA,IAEvBA,OAAOA,GAEXA,MAAOA,QA/CX,GAAIG,GAAK,GAAI1E,KACb,IAAS,MAALqE,EACA,MAAOK,EAEX,IAAIC,KAEJ,KAAK,GAAIC,KAAON,GAAkB,CAC9B,GAAIE,GAAID,EAAeF,EAAEO,GAAMN,EAAiBM,GACtCjC,UAAN6B,IAEJE,EAAGE,GAAOJ,EACVG,EAAOhB,KAAKiB,IAGhB,IAAK,GAAIA,KAAO5E,MAAK6E,cACjB,KAAIF,EAAOjB,QAAQkB,GAAO,IAA1B,CAEA,GAAIJ,GAAID,EAAeF,EAAEO,GAAM5E,KAAK6E,cAAcD,GACxCjC,UAAN6B,IAEJE,EAAGE,GAAOJ,EACVG,EAAOhB,KAAKiB,IAGhB,IAAK,GAAIA,KAAOP,GACRM,EAAOjB,QAAQkB,GAAO,KAE1BF,EAAGE,GAAOP,EAAEO,GAGhB,OAAOF,GChCX,IAAOlI,OAAP,SAAOA,GACHA,QAAAA,GAAoCA,EAAsBA,EAA6BA,GACnFsI,GAAIA,GACAA,EAAIA,EACJA,GACAA,QAASA,OACTA,SAAUA,WAGN,MAFKC,KAAMA,EAAOC,EAAsBtD,EAAMR,EAAasC,IAC3D5B,EAAET,QAAUwB,OACRd,GAAKkD,EAAKnB,QACH,GACXhC,EAAET,QAAU4D,EAAKlD,GACjBA,KACO,IAGfiD,OAAOA,GAGXtI,QAAAA,GAAsCA,EAA6BA,EAAoCA,GACnGyI,EAAWA,GAAYA,SAAUA,EAAIA,GACjC,MAAOC,KAAOC,EAOlBF,KALAA,GAIIA,GAJAA,KACAA,KAEAA,EAAIA,EAAKA,gBAENA,EAAEA,YAAYA,CACjBA,EAAMA,EAAYA,EAAEA,QAEpBA,KAAKA,GADDA,GAAQA,GACHA,EAAIA,EAAGA,EAAMA,EAAKA,OAAYA,EAAJA,EAASA,IACxCA,GAAIA,EAASA,EAAKA,EAAKA,IAAKA,CACxBA,EAAQA,CACRA,OAGRA,GAAIA,EACQA,GAARA,GACAA,EAAKA,KAAKA,GACVA,EAAKA,KAAKA,EAAMA,GAAIA,GAAsBA,KAE1CA,EAAMA,EAAKA,GAEfA,EAAIA,KAAKA,EAAEA,SAGfA,MAAOA,GAGXzI,GAAAA,GAAAA,SAAAA,GAGI4I,QAAAA,GAAoBA,GAHxBC,GAAAA,GAAAA,IAIQA,GAAAA,KAAAA,MADgBA,KAAAA,IAAAA,EAFZA,KAAAA,QAIJA,KAAKA,cAAgBA,WAAMA,MAAAA,GAAKA,KAAKA,KAAKA,iBAMlDD,MAXoCA,WAAAA,EAAAA,GAQhCA,EAAAA,UAAAA,KAAAA,SAAMA,GACFE,KAAKA,KAAKA,KAAKA,IAEvBF,GAXoC5I,EAAAA,WAapCA,GAAAA,WAAWA,UAAUA,QAAUA,SAAkBA,EAA6BA,GAA/C,GAAAsF,GAAA9B,KACvB4B,EAAI,GAAIpF,GAAAuF,UAEZ,OADAH,GAAEb,cAAgB,WAAM,MAAAwE,GAA2CzD,EAAMZ,EAAasC,IAC/E5B,GAEPpF,EAAAA,OACAA,EAAAA,KAAKA,UAAUA,QAAUA,EAAAA,WAAWA,UAAUA,UArE/CA,OAAAA,SCDP,IAAOA,OAAP,SAAOA,GACHA,QAAAA,GAAgCA,EAAsBA,EAAwBA,GAC1EgJ,EAAWA,GAAYA,SAAUA,EAAMA,GAAQ,MAAOxB,KAAMb,EAC5DqC,IAAIA,GACAA,GACAA,QAASA,OACTA,SAAUA,WAGN,IAFKlI,IAAGA,EAAId,EAAAsE,GAAGY,GAAM+D,WAAW1E,iBAChCa,EAAET,QAAUwB,OACLrF,EAAE0D,YAAY,CACjB,IAAK,GAAI6C,IAAM,EAAOI,EAAIb,EAAOrC,gBAAiBkD,EAAEjD,aAAe6C,GAC/DA,EAAML,EAASlG,EAAE6D,QAAS8C,EAAE9C,QAEhC,IAAI0C,EAEA,MADAjC,GAAET,QAAU7D,EAAE6D,SACP,EAGf,OAAO,GAGfqE,OAAOA,GAGXhJ,EAAAA,WAAWA,UAAUA,UAAYA,SAAYA,EAAaA,GAAzB,GAAAsF,GAAA9B,KACzBc,EAAqBsC,YAAkBC,OAAQD,EAAOtC,KAAOsC,EAC7DxB,EAAI,GAAIpF,GAAAuF,UAEZ,OADAH,GAAEb,cAAgB,WAAM,MAAA2E,GAAoC5D,EAAMhB,EAAI0C,IAC/D5B,GAEPpF,EAAAA,OACAA,EAAAA,KAAKA,UAAUA,UAAYA,EAAAA,WAAWA,UAAUA,YA/BjDA,OAAAA,SCAP,IAAOA,OAAP,SAAOA,GACHA,QAAAA,GAAuDA,EAA2BA,EAA4BA,EAAuCA,EAAuCA,EAAwDA,GAChPmJ,EAAWA,GAAYA,SAAUA,EAAIA,GACjC,MAAOT,KAAOC,EAElBQ,IAAIA,GACAA,EACAA,EAAIA,EACJA,GACAA,QAASA,OACTA,SAAUA,WAEN,GADA/D,EAAET,QAAUwB,QACPQ,EAAG,CAEJ,GADAA,EAAIzB,EAAKX,iBACJoC,EAAEnC,WACH,OAAO,CACX4E,GAAMpJ,EAAAsE,GAAG+E,GAAOC,UAGpB,GAAIC,EACJ,GAAG,CACC,KAAOvB,EAAIoB,EAAIhC,OAAQY,IAEnB,GADAuB,EAAMH,EAAIpB,GACNhB,EAASwC,EAAiB7C,EAAEhC,SAAU8E,EAAiBF,IAGvD,MAFAvB,KACA5C,EAAET,QAAU+E,EAAe/C,EAAEhC,QAAS4E,IAC/B,CAGfvB,GAAI,QACCrB,EAAEnC,WACX,QAAO,GAGf2E,OAAOA,GAGXnJ,EAAAA,WAAWA,UAAUA,KAAOA,SAAgCA,EAAYA,EAAkCA,EAAuCA,EAA8CA,GAAnK,GAAAsF,GAAA9B,KACpBc,EAA0B+E,YAAiBxC,OAAQwC,EAAM/E,KAAO+E,EAChEjE,EAAI,GAAIpF,GAAAuF,UAEZ,OADAH,GAAEb,cAAgB,WAAM,MAAAoF,GAAyDrE,EAAMhB,EAAIkF,EAAkBC,EAAkBC,EAAgB1C,IACxI5B,GAEPpF,EAAAA,OACAA,EAAAA,KAAKA,UAAUA,KAAOA,EAAAA,WAAWA,UAAUA,OA5C5CA,OAAAA,SCCP,IAAOA,OAAP,SAAOA,GA6CHA,QAAAA,KAAiB4J,KAAKA,YAAcA,EA5CpC5J,EAAAA,WAAWA,UAAUA,OAASA,WAI1B,IAHA,GAAI6J,GAAI,GAAIC,GAERC,EAAavG,KAAKe,gBACfwF,EAAWvF,YACdqF,EAAE1C,KAAK4C,EAAWpF,QAGtB,OAAiBkF,GAGrB7J,IAAAA,GAAAA,SAAAA,GAAAgK,QAAAA,KAA6BC,EAAAA,MAAAA,KAAAA,WA8B7BD,MA9B6BA,WAAAA,EAAAA,GAEzBA,EAAAA,UAAAA,SAAAA,WAAsBE,KAAMA,IAAIA,OAAMA,oBACtCF,EAAAA,UAAAA,eAAAA,WAA4BG,KAAMA,IAAIA,OAAMA,oBAC5CH,EAAAA,UAAAA,IAAAA,WAAYI,KAAMA,IAAIA,OAAMA,oBAC5BJ,EAAAA,UAAAA,KAAAA,WTsyBI,IStyBEK,GAAAA,MAAAA,EAAAA,EAAAA,EAAAA,UAAAA,OAAAA,IAAAA,EAAAA,EAAAA,GAAAA,UAAAA,EAAyBA,MAAMA,IAAIA,OAAMA,oBAC/CL,EAAAA,UAAAA,MAAAA,WAAcM,KAAMA,IAAIA,OAAMA,oBAC9BN,EAAAA,UAAAA,MAAAA,SAAOA,EAAeA,GAAqBO,KAAMA,IAAIA,OAAMA,oBAC3DP,EAAAA,UAAAA,KAAAA,SAAMA,GAA2CQ,KAAMA,IAAIA,OAAMA,oBAIjER,EAAAA,UAAAA,OAAAA,WAAiBS,KAAMA,IAAIA,OAAMA,oBAEjCT,EAAAA,UAAAA,QAAAA,WTwyBI,ISxyBKU,GAAAA,MAAAA,EAAAA,EAAAA,EAAAA,UAAAA,OAAAA,IAAAA,EAAAA,EAAAA,GAAAA,UAAAA,EAAyBA,MAAMA,IAAIA,OAAMA,oBAClDV,EAAAA,UAAAA,QAAAA,SAASA,EAAkBA,GAA8BW,KAAMA,IAAIA,OAAMA,oBACzEX,EAAAA,UAAAA,YAAAA,SAAaA,EAAkBA,GAA8BY,KAAMA,IAAIA,OAAMA,oBAC7EZ,EAAAA,UAAAA,MAAAA,SAAOA,EAA8DA,GAA0Ba,KAAMA,IAAIA,OAAMA,oBAC/Gb,EAAAA,UAAAA,KAAAA,SAAMA,EAA8DA,GAA0Bc,KAAMA,IAAIA,OAAMA,oBAC9Gd,EAAAA,UAAAA,QAAAA,SAASA,EAA2DA,GAAuBe,KAAMA,IAAIA,OAAMA,oBAC3Gf,EAAAA,UAAAA,IAAAA,SAAOA,EAAwDA,GAAsBgB,KAAMA,IAAIA,OAAMA,oBACrGhB,EAAAA,UAAAA,OAAAA,SAAQA,EAA8DA,GAAsBiB,KAAMA,IAAIA,OAAMA,oBAC5GjB,EAAAA,UAAAA,OAAAA,SAAUA,EAAwFA,GAAsBkB,KAAMA,IAAIA,OAAMA,oBACxIlB,EAAAA,UAAAA,YAAAA,SAAeA,EAAwFA,GAAsBmB,KAAMA,IAAIA,OAAMA,oBAK7InB,EAAAA,UAAAA,OAAAA,SAAOA,GAAoBoB,KAAMA,IAAIA,OAAMA,oBAC3CpB,EAAAA,UAAAA,YAAAA,SAAYA,GAAkEqB,KAAMA,IAAIA,OAAMA,oBAClGrB,GA9B6BhK,EAAAA,WAAhBA,GAAAA,KAAIA,CAgCjBA,KAAKA,GAAIA,KAAKA,OAAWA,MAAMA,eAAeA,KAAIA,EAAKA,GAAKA,MAAMA,GAElEA,GAAGA,UAAYA,MAAMA,UACrBA,EAAKA,UAAYA,GAAIA,EACrBA,KAAKA,GAAIA,KAAOA,GAAAA,WAAWA,UACXA,kBAARA,IAEJA,EAAKA,UAAUA,GAAOA,EAAAA,WAAWA,UAAUA,GAG/CA,GAAKA,UAAUA,cAAgBA,WAC3B,GAAIsL,GAAO9H,KACP0C,EAAMoF,EAAKlE,OACXhC,GAAMZ,SAAU2B,OAAWxB,QAASwB,QACpCF,EAAQ,EAUZ,OATAb,GAAEZ,SAAW,WAET,MADAyB,KACIA,GAASC,GACTd,EAAET,QAAUwB,QACL,IAEXf,EAAET,QAAU2G,EAAKrF,IACV,IAEJb,GAEXpF,EAAKA,UAAUA,OAASA,SAAYA,GAChC,MAAOwD,MAAK+H,YAAY,SAAAzK,GAAK,MAAAA,KAAM0K,IAAMC,OAE7CzL,EAAKA,UAAUA,YAAcA,SAAYA,GAGrC,IAAK,GADDuJ,GADAmC,KAEKrG,EAAI7B,KAAK4D,OAAS,EAAG/B,GAAK,EAAGA,IAClCkE,EAAM/F,KAAK6B,GACPsG,EAAUpC,EAAKlE,MAAO,IACtB7B,KAAKoI,OAAOvG,EAAG,GACfqG,EAAQvE,KAAKoC,GAGrB,OAAOmC,GAAQpH,KAAKuH,YAnFrB7L,OAAAA,SCDP,IAAOA,OAAP,SAAOA,GACHA,QAAAA,GAAoCA,EAAwBA,EAA6BA,EAAuBA,GAC5G8L,MAAOA,IAAIA,GAA2BA,EAAQA,EAAaA,EAAcA,GAG7E9L,GAAAA,GAAAA,SAAAA,GAII+L,QAAAA,GAAaA,EAAwBA,EAA6BA,EAAuBA,GACrFC,EAAAA,KAAAA,MAEAA,KAAKA,OAASA,EACdA,EAAcA,GAAeA,SAAUA,EAASA,GAC5C,MAAOxE,GAAIb,EAAI,EAASA,EAAJa,EAAQ,GAAK,EAErCwE,IAAIA,GAAUA,KAAiBA,EAAQA,GAAKA,CAC5CA,MAAKA,OAASA,SAACA,EAAGA,GAAMA,MAAAA,GAASA,EAAYA,EAAYA,GAAIA,EAAYA,KAiCjFD,MA7CyCA,WAAAA,EAAAA,GAerCA,EAAAA,UAAAA,cAAAA,WACIE,GAEIA,GAFAA,EAASA,KAAKA,OACdA,EAASA,KAAKA,OAEdA,EAAIA,EACJA,GACAA,QAASA,OACTA,SAAUA,WAMN,MALK7F,KACDA,EAAMpG,EAAAsE,GAAG4H,GAAQ5C,UACjBlD,EAAI+F,KAAKC,IAEbhH,EAAET,QAAUwB,OACRd,GAAKe,EAAIgB,QACF,GACXhC,EAAET,QAAUyB,EAAIf,GAChBA,KACO,IAGf4G,OAAOA,IAGXF,EAAAA,UAAAA,OAAAA,SAAkBA,EAAkCA,GAChDM,MAAOA,IAAIA,GAAmCA,KAAMA,GAAaA,EAAOA,IAG5EN,EAAAA,UAAAA,iBAAAA,SAA4BA,EAAkCA,GAC1DO,MAAOA,IAAIA,GAAmCA,KAAMA,GAAaA,EAAMA,IAE/EP,GA7CyC/L,EAAAA,YA+CzCA,EAAAA,SAAAA,GACIuM,QAAAA,GAAaA,EAA0CA,EAA6BA,EAAuBA,GACvGC,EAAAA,KAAAA,KAAMA,EAAQA,EAAaA,EAAcA,EAEzCA,IAAIA,GAAeA,EAAOA,OACtBA,EAAaA,KAAKA,MACtBA,MAAKA,OAASA,SAACA,EAAGA,GAAMA,MAAAA,GAAaA,EAAGA,IAAMA,EAAWA,EAAGA,IAEpED,MARkDA,WAAAA,EAAAA,GAQlDA,GARkDvM,GAU9CA,EAAKA,EAAAA,WAAWA,SACpBA,GAAGA,QAAUA,SAAiBA,EAA6BA,GACvD,MAAOyM,GAAkCjJ,KAAMkB,GAAa,EAAOsC,IAEvEhH,EAAGA,kBAAoBA,SAAiBA,EAA6BA,GACjE,MAAOyM,GAAkCjJ,KAAMkB,GAAa,EAAMsC,IAElEhH,EAAAA,OACAA,EAAAA,KAAKA,UAAUA,QAAUA,EAAAA,WAAWA,UAAUA,QAC9CA,EAAAA,KAAKA,UAAUA,kBAAoBA,EAAAA,WAAWA,UAAUA,oBAvEzDA,OAAAA,SCAP,IAAOA,OAAP,SAAOA,GACHA,QAAAA,GAA0BA,EAAeA,EAAaA,GAClD0M,GAAIA,GAAIA,EAAQA,EACZA,GACAA,QAASA,OACTA,SAAUA,WAEN,MADArH,IAAKsH,EACDtH,GAAKuH,GACE,GACXxH,EAAET,QAAUU,GACL,IAGfqH,OAAOA,GAGX1M,QAAAA,GAAuBA,EAAeA,EAAaA,GAG/C6M,GAFAA,EAAQA,GAASA,EACjBA,EAAMA,GAAOA,EACTA,EAAQA,EACRA,KAAMA,IAAIA,OAAMA,oCACHA,OAAbA,IACAA,EAAYA,EAChBA,IAAIA,GAAIA,GAAIA,GAAAA,UAEZA,OADAA,GAAEA,cAAgBA,WAAMA,MAAAA,GAAgBA,EAAOA,EAAKA,IAC7CA,EATK7M,EAAAA,MAAKA,GAhBlBA,OAAAA,SCAP,IAAOA,OAAP,SAAOA,GACHA,QAAAA,GAA8BA,GAC1B8M,GAAIA,GACAA,EAAIA,EACJA,GACAA,QAASA,OACTA,SAAUA,WAON,MANKC,KACDA,EAAI/M,EAAAsE,GAAGY,GAAMoE,UACbjE,EAAI0H,EAAE3F,QAEV/B,IACAD,EAAET,QAAUoI,EAAE1H,GACPA,GAAK,GAGpByH,OAAOA,GAGX9M,EAAAA,WAAWA,UAAUA,QAAUA,WAAA,GAAAsF,GAAA9B,KACvB4B,EAAI,GAAIpF,GAAAuF,UAEZ,OADAH,GAAEb,cAAgB,WAAM,MAAAyI,GAAkC1H,IACnDF,GAEPpF,EAAAA,OACAA,EAAAA,KAAKA,UAAUA,QAAUA,EAAAA,WAAWA,UAAUA,UAzB/CA,OAAAA,SCFP,IAAOA,OAAP,SAAOA,GACHA,QAAAA,GAAsBA,EAAeA,GAEjCiN,GADAA,EAASA,GAAUA,EACJA,IAAXA,EACAA,MAAOA,MAAKA,MAAMA,EACtBA,IAAIA,GAAQA,KAAKA,IAAIA,GAAIA,EACzBA,OAAOA,MAAKA,MAAMA,EAAQA,GAASA,EALvBjN,EAAAA,MAAKA,GADlBA,OAAAA,SCGP,IAAOA,OAAP,SAAOA,GACHA,QAAAA,GAAsCA,EAAsBA,GACxDkN,GAAIA,GACAA,EAAIA,EACJA,GACAA,QAASA,OACTA,SAAUA,WAEN,MADKpM,KAAGA,EAAIoE,EAAKX,iBACZzD,EAAE0D,YACPY,EAAET,QAAUwI,EAASrM,EAAE6D,QAASU,GAChCA,KACO,IAHmB,GAMlC6H,OAAOA,GAGXlN,QAAAA,GAA0CA,EAAsBA,GAC5DoN,GAAIA,GACAA,EACAA,GACAA,QAASA,OACTA,SAAUA,WAGN,IAFAhI,EAAET,QAAUwB,OACPrF,IAAGA,EAAIoE,EAAKX,kBACT8I,IAAWA,EAAO7I,YAAY,CAClC,IAAK1D,EAAE0D,WACH,OAAO,CACX6I,GAASrN,EAAAsN,mBAA+BH,EAASrM,EAAE6D,UAGvD,MADAS,GAAET,QAAU0I,EAAO1I,SACZ,GAGfyI,OAAOA,GAGXpN,EAAAA,WAAWA,UAAUA,OAASA,SAAoBA,GAApB,GAAAsF,GAAA9B,KACtB4B,EAAI,GAAIpF,GAAAuF,UAEZ,OADAH,GAAEb,cAAgB,WAAM,MAAAgJ,GAAiCjI,EAAM6H,IACxD/H,GAEXpF,EAAAA,WAAWA,UAAUA,WAAaA,SAAoBA,GAApB,GAAAsF,GAAA9B,KAC1B4B,EAAI,GAAIpF,GAAAuF,UAEZ,OADAH,GAAEb,cAAgB,WAAM,MAAAiJ,GAAiDlI,EAAM6H,IACxE/H,GAEPpF,EAAAA,OACAA,EAAAA,KAAKA,UAAUA,OAASA,EAAAA,WAAWA,UAAUA,OAC7CA,EAAAA,KAAKA,UAAUA,WAAaA,EAAAA,WAAWA,UAAUA,aAjDlDA,OAAAA,SCHP,IAAOA,OAAP,SAAOA,GAGHA,QAAAA,GAA+CA,GAC3CyN,MAAIA,OAAMA,QAAQA,GACDA,EAAKA,KAAKA,gBAChBA,MAAPA,GAA4CA,kBAAtBA,GAAIA,cACnBA,EAAIA,gBACRA,KALKzN,EAAAA,mBAAkBA,GAH/BA,OAAAA,SCEP,IAAOA,OAAP,SAAOA,GACHA,QAAAA,GAA2BA,EAAsBA,GAC7C0N,GAAIA,GACAA,GACAA,QAASA,OACTA,SAAUA,WACN,IAAK5M,EAAG,CACJA,EAAIoE,EAAKX,eACT,KAAK,GAAIc,GAAI,EAAOsI,EAAJtI,EAAWA,IACvB,IAAKvE,EAAE0D,WAAY,OAAO,EAIlC,MAAK1D,GAAE0D,YAKPY,EAAET,QAAU7D,EAAE6D,SACP,IALHS,EAAET,QAAUwB,QACL,IAOnBuH,OAAOA,GAGX1N,QAAAA,GAAgCA,EAAsBA,GAClD4N,GAAIA,GACAA,GACAA,QAASA,OACTA,SAAUA,WACN,IAAK9M,EAAG,CACJA,EAAIoE,EAAKX,eACT,KAAK,GAAIc,GAAI,EAAGvE,EAAE0D,WAAYa,IAC1B,IAAKsG,EAAUvG,EAAET,QAAU7D,EAAE6D,QAASU,GAClC,OAAO,CAGf,OADAD,GAAET,QAAUwB,QACL,EAGX,MAAKrF,GAAE0D,YAKPY,EAAET,QAAU7D,EAAE6D,SACP,IALHS,EAAET,QAAUwB,QACL,IAOnByH,OAAOA,GAGX5N,EAAAA,WAAWA,UAAUA,KAAOA,SAAYA,GAAZ,GAAAsF,GAAA9B,KACpB4B,EAAI,GAAIpF,GAAAuF,UAEZ,OADAH,GAAEb,cAAgB,WAAM,MAAAsJ,GAA+BvI,EAAMqI,IACtDvI,GAEXpF,EAAAA,WAAWA,UAAUA,UAAYA,SAAYA,GAAZ,GAAAsF,GAAA9B,KACzB4B,EAAI,GAAIpF,GAAAuF,UAEZ,OADAH,GAAEb,cAAgB,WAAM,MAAAuJ,GAAoCxI,EAAMqG,IAC3DvG,GAEPpF,EAAAA,OACAA,EAAAA,KAAKA,UAAUA,KAAOA,EAAAA,WAAWA,UAAUA,KAC3CA,EAAAA,KAAKA,UAAUA,UAAYA,EAAAA,WAAWA,UAAUA,YAhEjDA,OAAAA,SCAP,IAAOA,OAAP,SAAOA,GACHA,QAAAA,GAA2BA,EAAsBA,GAC7C+N,GAAIA,GACAA,EAAIA,EACJA,GACAA,QAASA,OACTA,SAAUA,WAGN,MAFKjN,KAAGA,EAAIoE,EAAKX,iBACjBc,IACIA,EAAIsI,GACG,GACXvI,EAAET,QAAUwB,OACPrF,EAAE0D,YAEPY,EAAET,QAAU7D,EAAE6D,SACP,IAFI,IAKnBoJ,OAAOA,GAGX/N,QAAAA,GAAgCA,EAAsBA,GAClDgO,GAAIA,GACAA,EAAIA,EACJA,GACAA,QAASA,OACTA,SAAUA,WAGN,MAFKlN,KAAGA,EAAIoE,EAAKX,iBAEZzD,EAAE0D,YAAemH,EAAU7K,EAAE6D,QAASU,IAI3CA,IAEAD,EAAET,QAAU7D,EAAE6D,SACP,IANHS,EAAET,QAAUwB,QACL,IAQnB6H,OAAOA,GAGXhO,EAAAA,WAAWA,UAAUA,KAAOA,SAAYA,GAAZ,GAAAsF,GAAA9B,KACpB4B,EAAI,GAAIpF,GAAAuF,UAEZ,OADAH,GAAEb,cAAgB,WAAM,MAAA0J,GAA+B3I,EAAMqI,IACtDvI,GAEXpF,EAAAA,WAAWA,UAAUA,UAAYA,SAAYA,GAAZ,GAAAsF,GAAA9B,KACzB4B,EAAI,GAAIpF,GAAAuF,UAEZ,OADAH,GAAEb,cAAgB,WAAM,MAAA2J,GAAoC5I,EAAMqG,IAC3DvG,GAEPpF,EAAAA,OACAA,EAAAA,KAAKA,UAAUA,KAAOA,EAAAA,WAAWA,UAAUA,KAC3CA,EAAAA,KAAKA,UAAUA,UAAYA,EAAAA,WAAWA,UAAUA,YAtDjDA,OAAAA,SCAP,IAAOA,OAAP,SAAOA,GACHA,QAAAA,GAA+BA,EAAsBA,GACjDmO,GAEIA,GAFAA,GAAUA,EACVA,KAEAA,GACAA,QAASA,OACTA,SAAQA,WACJC,GAAKA,EAGEA,CAAAA,GAASA,MAALA,EACPA,OAAOA,CAEPA,GAAQA,KAAKA,GACbA,EAAIA,EAAAA,mBAAyBA,EAASA,EAAEA,cANxCA,GAAIA,EAAKA,gBACTA,GAAUA,CAQdA,QAAQA,GAAMA,EAAEA,YACRA,EAAQA,OAASA,IAErBA,EAAIA,EAAQA,KAIhBA,OADAA,GAAEA,QAAeA,MAALA,EAAYA,OAAYA,EAAEA,QACjBA,SAAdA,EAAEA,SAGjBD,OAAOA,GAGXnO,QAAAA,GAAqCA,EAAsBA,EAAkCA,GACzFqO,GAEIA,GAFAA,GAAUA,EACVA,KAEAA,GACAA,QAASA,OACTA,SAAQA,WACJC,GAAKA,EAGEA,CAAAA,GAASA,MAALA,EACPA,OAAOA,CAEPA,GAAQA,KAAKA,GACbA,EAAIA,EAAAA,mBAAyBA,EAASA,EAAEA,cANxCA,GAAIA,EAAKA,gBACTA,GAAUA,CAQdA,GAAGA,CACCA,OAAQA,GAAMA,EAAEA,YACRA,EAAQA,OAASA,IAErBA,EAAIA,EAAQA,KAEhBA,GAAEA,QAAeA,MAALA,EAAYA,OAAYA,EAAEA,cACjCA,EAAUA,EAAEA,SAErBA,OAAqBA,UAAdA,EAAEA,SAGjBD,OAAOA,GAGXrO,EAAAA,WAAWA,UAAUA,SAAWA,SAAYA,GAAZ,GAAAsF,GAAA9B,KACxB4B,EAAI,GAAIpF,GAAAuF,UAEZ,OADAH,GAAEb,cAAgB,WAAM,MAAAgK,GAAmCjJ,EAAM6H,IAC1D/H,GAEXpF,EAAAA,WAAWA,UAAUA,eAAiBA,SAAYA,EAAeA,GAA3B,GAAAsF,GAAA9B,KAC9BgL,KACApJ,EAAI,GAAIpF,GAAAuF,UAgBZ,OAfIkJ,GACArJ,EAAEb,cAAgB,WAAM,MAAAmK,GAAyCpJ,EAAM6H,EAAU,SAAC1F,GAC9E,MAAI+G,GAASG,KAAK,SAAAvJ,GAAK,MAAAqJ,GAAQhH,EAAGrC,MACvB,GACXoJ,EAASrH,KAAKM,IACP,MAGXrC,EAAEb,cAAgB,WAAM,MAAAmK,GAAyCpJ,EAAM6H,EAAU,SAAC1F,GAC9E,MAAI+G,GAAStH,QAAQO,GAAK,IACf,GACX+G,EAASrH,KAAKM,IACP,MAGRrC,GAEPpF,EAAAA,OACAA,EAAAA,KAAKA,UAAUA,SAAWA,EAAAA,WAAWA,UAAUA,SAC/CA,EAAAA,KAAKA,UAAUA,eAAiBA,EAAAA,WAAWA,UAAUA,iBA1FtDA,OAAAA,SCAP,IAAOA,OAAP,SAAOA,GACHA,QAAAA,GAA4BA,EAAsBA,EAAwBA,GACtE4O,EAAWA,GAAYA,SAAUA,EAAMA,GACnC,MAAOpH,KAAMb,EAEjBiI,IAAIA,GAEAA,EADAA,KAEAA,GACAA,QAASA,OACTA,SAAUA,WAGN,GAFK9N,IAAGA,EAAId,EAAAsE,GAAGY,GAAM+D,WAAW1E,iBAChCa,EAAET,QAAUwB,QACPQ,GAAK7F,EAAE0D,WAER,MADAyC,GAAQE,KAAK/B,EAAET,QAAU7D,EAAE6D,UACpB,CAGX,KADAgC,EAAIA,GAAK3G,EAAAsE,GAAGsC,GAAQqC,WAAW1E,gBACxBoC,EAAEnC,YAAY,CACjB,IAAK,GAAIa,GAAI,EAAGgC,GAAM,EAAOnB,EAAMe,EAAQG,OAAYlB,EAAJb,IAAYgC,EAAKhC,IAChEgC,EAAML,EAASC,EAAQ5B,GAAIsB,EAAEhC,QAEjC,KAAK0C,EAED,MADAjC,GAAET,QAAUgC,EAAEhC,SACP,EAGf,OAAO,GAGfiK,OAAOA,GAGX5O,EAAAA,WAAWA,UAAUA,MAAQA,SAAYA,EAAaA,GAAzB,GAAAsF,GAAA9B,KACrBc,EAAoBsC,YAAkBC,OAAQD,EAAOtC,KAAOsC,EAC5DxB,EAAI,GAAIpF,GAAAuF,UAEZ,OADAH,GAAEb,cAAgB,WAAM,MAAAsK,GAAgCvJ,EAAMhB,EAAI0C,IAC3D5B,GAEPpF,EAAAA,OACAA,EAAAA,KAAKA,UAAUA,MAAQA,EAAAA,WAAWA,UAAUA,QAxC7CA,OAAAA,SCAP,IAAOA,OAAP,SAAOA,GACHA,QAAAA,GAA4BA,EAAsBA,GAC9C8O,GAAIA,GACAA,GACAA,QAASA,OACTA,SAAUA,WACDhO,IAAGA,EAAIoE,EAAKX,gBAEjB,KADA,GAAIwK,GACGjO,EAAE0D,YACL,GAAIwK,EAAOD,EAAIjO,EAAE6D,SAEb,MADAS,GAAET,QAAUoK,GACL,CAGf,QAAO,GAGfD,OAAOA,GAGX9O,EAAAA,WAAWA,UAAUA,MAAQA,SAAYA,GAAZ,GAAAsF,GAAA9B,KACrB4B,EAAI,GAAIpF,GAAAuF,UAEZ,OADAH,GAAEb,cAAgB,WAAM,MAAA0K,GAAgC3J,EAAM0J,IACvD5J,GAEPpF,EAAAA,OACAA,EAAAA,KAAKA,UAAUA,MAAQA,EAAAA,WAAWA,UAAUA,QA1B7CA,OAAAA,SCFP,IAAOA,OAAP,SAAOA,GACHA,QAAAA,GAAsBA,GAClBqG,GAAIA,GAAIA,GAAIA,GAAAA,UAIZA,OAHAA,GAAEA,cAAgBA,WACd,MAAO6I,GAAkBC,IAEJ9I,EAG7BrG,QAAAA,GAA2BA,GACvBoP,GAAIA,GAAUA,EAAIA,gBACdA,GAAsBA,QAASA,OAAWA,SAAUA,OASxDA,OARAA,GAAEA,SAAWA,WACT,MAAIC,GAAQ7K,YACRiD,EAAE9C,QAAU0K,EAAQ1K,SACb,IAEX8C,EAAE9C,QAAUwB,QACL,IAEJiJ,EAnBKpP,EAAAA,GAAEA,GADfA,OAAAA,SAuBP,IAAIsP,IAAKtP,KAAKsE,GCrBPtE,MAAP,SAAOA,GACHA,QAAAA,GAA4CA,EAAsBA,EAA8BA,GAC5FuP,GAAIA,GACAA,EACAA,GACAA,QAASA,OACTA,SAAUA,WAIN,MAHK5I,KAAGA,EAAIzB,EAAKX,iBACZzD,IAAGA,EAAI8F,EAAOrC,iBACnBa,EAAET,QAAUwB,OACPQ,EAAEnC,YAAe1D,EAAE0D,YAExBY,EAAET,QAAU+E,EAAe/C,EAAEhC,QAAS7D,EAAE6D,UACjC,IAFI,GAKnB4K,OAAOA,GAGXvP,EAAAA,WAAWA,UAAUA,IAAMA,SAA6BA,EAAaA,GAA1C,GAAAsF,GAAA9B,KACnBc,EAA2BsC,YAAkBC,OAAQD,EAAOtC,KAAOsC,EACnExB,EAAI,GAAIpF,GAAAuF,UAEZ,OADAH,GAAEb,cAAgB,WAAM,MAAAiL,GAAmDlK,EAAMhB,EAAIoF,IAC9EtE,GAEPpF,EAAAA,OACAA,EAAAA,KAAKA,UAAUA,IAAMA,EAAAA,WAAWA,UAAUA,MA1B3CA,OAAAA","file":"ex.es3.min.js","sourcesContent":["module exjs {\r\n    export var version = '0.3.0';\r\n}",null,"module exjs {\r\n    export interface IProjectionFunc<T, TResult> {\r\n        (t: T): TResult;\r\n    }\r\n    export interface IProjectionIndexFunc<T, TResult> {\r\n        (t: T, index: number): TResult;\r\n    }\r\n    export interface IEnumerable<T> {\r\n        getEnumerator(): IEnumerator<T>;\r\n    }\r\n    export interface IEnumerableEx<T> extends IEnumerable<T> {\r\n        aggregate<TAccumulate>(seed: TAccumulate, accumulator: (acc: TAccumulate, cur: T) => TAccumulate): TAccumulate;\r\n        all(predicate: IProjectionFunc<T, boolean>): boolean;\r\n        all(predicate: IProjectionIndexFunc<T, boolean>): boolean;\r\n        any(predicate?: IProjectionFunc<T, boolean>): boolean;\r\n        any(predicate?: IProjectionIndexFunc<T, boolean>): boolean;\r\n        apply<T>(action: IProjectionFunc<T, any>): IEnumerableEx<T>;\r\n        apply<T>(action: IProjectionIndexFunc<T, any>): IEnumerableEx<T>;\r\n        at(index: number): T;\r\n        average(selector?: (t: T) => number): number;\r\n        concat(second: IEnumerable<T>): IEnumerableEx<T>;\r\n        concat(second: T[]): IEnumerableEx<T>;\r\n        count(predicate?: (t: T) => boolean): number;\r\n        difference(second: IEnumerable<T>, comparer?: (f: T, s: T) => boolean): IDifference<T>;\r\n        difference(second: T[], comparer?: (f: T, s: T) => boolean): IDifference<T>;\r\n        distinct(comparer?: (f: T, s: T) => boolean): IEnumerableEx<T>;\r\n        except(second: IEnumerable<T>, comparer?: (f: T, s: T) => boolean): IEnumerableEx<T>;\r\n        except(second: T[], comparer?: (f: T, s: T) => boolean): IEnumerableEx<T>;\r\n        first(match?: (t: T) => boolean): T;\r\n        firstIndex(match?: (t: T) => boolean): number;\r\n        forEach (action: (t: T) => any);\r\n        groupBy<TKey>(keySelector: (t: T) => TKey, comparer?: (k1: TKey, k2: TKey) => boolean): IEnumerableEx<IGrouping<TKey, T>>;\r\n        intersect(second: IEnumerable<T>, comparer?: (f: T, s: T) => boolean): IEnumerableEx<T>;\r\n        intersect(second: T[], comparer?: (f: T, s: T) => boolean): IEnumerableEx<T>;\r\n        join<TInner, TKey, TResult>(inner: IEnumerable<TInner>, outerKeySelector: (t: T) => TKey, innerKeySelector: (t: TInner) => TKey, resultSelector: (o: T, i: TInner) => TResult, comparer?: (k1: TKey, k2: TKey) => boolean): IEnumerableEx<TResult>;\r\n        join<TInner, TKey, TResult>(inner: TInner[], outerKeySelector: (t: T) => TKey, innerKeySelector: (t: TInner) => TKey, resultSelector: (o: T, i: TInner) => TResult, comparer?: (k1: TKey, k2: TKey) => boolean): IEnumerableEx<TResult>;\r\n        last(match?: (t: T) => boolean): T;\r\n        lastIndex(match?: (t: T) => boolean): number;\r\n        max(selector?: (t: T) => number): number;\r\n        min(selector?: (t: T) => number): number;\r\n        orderBy<TKey>(keySelector: (t: T) => TKey, comparer?: (f: TKey, s: TKey) => number): IOrderedEnumerable<T>;\r\n        orderByDescending<TKey>(keySelector: (t: T) => TKey, comparer?: (f: TKey, s: TKey) => number): IOrderedEnumerable<T>;\r\n        reverse(): IEnumerableEx<T>;\r\n        select<TResult>(selector: IProjectionFunc<T, TResult>): IEnumerableEx<TResult>;\r\n        select<TResult>(selector: IProjectionIndexFunc<T, TResult>): IEnumerableEx<TResult>;\r\n        selectMany<TResult>(selector: (t: T) => IEnumerable<TResult>): IEnumerableEx<TResult>;\r\n        selectMany<TResult>(selector: (t: T) => TResult[]): IEnumerableEx<TResult>;\r\n        skip(count: number): IEnumerableEx<T>;\r\n        skipWhile(predicate: IProjectionFunc<T, boolean>): IEnumerableEx<T>;\r\n        skipWhile(predicate: IProjectionIndexFunc<T, boolean>): IEnumerableEx<T>;\r\n        standardDeviation(selector?: (t: T) => number): number;\r\n        sum(selector?: (t: T) => number): number;\r\n        take(count: number): IEnumerableEx<T>;\r\n        takeWhile(predicate: IProjectionFunc<T, boolean>): IEnumerableEx<T>;\r\n        takeWhile(predicate: IProjectionIndexFunc<T, boolean>): IEnumerableEx<T>;\r\n        toArray(): T[];\r\n        toList(): IList<T>;\r\n        toMap<TKey, TValue>(keySelector: (t: T) => TKey, valueSelector: (t: T) => TValue): IMap<TKey, TValue>;\r\n        //toDictionary();\r\n        traverse (selector: (t: T) => T[]): IEnumerableEx<T>;\r\n        traverse (selector: (t: T) => IEnumerable<T>): IEnumerableEx<T>;\r\n        traverseUnique (selector: (t: T) => T[], matcher?: (t1: T, t2: T) => boolean): IEnumerableEx<T>;\r\n        traverseUnique (selector: (t: T) => IEnumerable<T>, matcher?: (t1: T, t2: T) => boolean): IEnumerableEx<T>;\r\n        union(second: IEnumerable<T>, comparer?: (f: T, s: T) => boolean): IEnumerableEx<T>;\r\n        union(second: T[], comparer?: (f: T, s: T) => boolean): IEnumerableEx<T>;\r\n        where(filter: (t: T) => boolean): IEnumerableEx<T>;\r\n        zip<TSecond, TResult>(second: IEnumerable<TSecond>, resultSelector: (f: T, s: TSecond) => TResult): IEnumerableEx<TResult>;\r\n        zip<TSecond, TResult>(second: TSecond[], resultSelector: (f: T, s: TSecond) => TResult): IEnumerableEx<TResult>;\r\n    }\r\n    export interface IEnumerator<T> {\r\n        current: T;\r\n        moveNext(): boolean;\r\n    }\r\n\r\n    export interface IOrderedEnumerable<T> extends IEnumerableEx<T> {\r\n        thenBy<TKey>(keySelector: (t: T) => TKey, comparer?: (f: TKey, s: TKey) => number): IOrderedEnumerable<T>;\r\n        thenByDescending<TKey>(keySelector: (t: T) => TKey, comparer?: (f: TKey, s: TKey) => number): IOrderedEnumerable<T>;\r\n    }\r\n\r\n    export interface IGrouping<TKey, TElement> extends IEnumerableEx<TElement> {\r\n        key: TKey;\r\n    }\r\n\r\n    export interface IDifference<T> {\r\n        intersection: IEnumerableEx<T>;\r\n        aNotB: IEnumerableEx<T>;\r\n        bNotA: IEnumerableEx<T>;\r\n    }\r\n\r\n    export interface IList<T> extends IEnumerableEx<T> {\r\n        //Array<T> methods\r\n        toString(): string;\r\n        toLocaleString(): string;\r\n        pop(): T;\r\n        push(...items: T[]): number;\r\n        shift(): T;\r\n        slice(start: number, end?: number): T[];\r\n        sort(compareFn?: (a: T, b: T) => number): T[];\r\n        splice(start: number): T[];\r\n        splice(start: number, deleteCount: number, ...items: T[]): T[];\r\n        unshift(...items: T[]): number;\r\n        indexOf(searchElement: T, fromIndex?: number): number;\r\n        lastIndexOf(searchElement: T, fromIndex?: number): number;\r\n        every(callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg?: any): boolean;\r\n        some(callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg?: any): boolean;\r\n        forEach(callbackfn: (value: T, index: number, array: T[]) => void, thisArg?: any): void;\r\n        map<U>(callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): U[];\r\n        filter(callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg?: any): T[];\r\n        reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue?: T): T;\r\n        reduce<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U;\r\n        reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue?: T): T;\r\n        reduceRight<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U;\r\n        length: number;\r\n        [n: number]: T;\r\n\r\n        //List<T> methods\r\n        /**\r\n         * Removes item from list.\r\n         * @param item - item to remove\r\n         */\r\n        remove(item: T): boolean;\r\n        /**\r\n         * Removes items that match predicate.\r\n         * Returns items that were removed.\r\n         * @param predicate - function to match items that should be removed (index parameter is based on original list)\r\n         */\r\n        removeWhere(predicate: (t: T, index?: number) => boolean): IEnumerableEx<T>;\r\n    }\r\n\r\n    export class Enumerable<T> implements IEnumerableEx<T> {\r\n        constructor () {\r\n        }\r\n\r\n        getEnumerator (): IEnumerator<T> {\r\n            return {\r\n                moveNext: function () {\r\n                    return false;\r\n                },\r\n                current: undefined\r\n            };\r\n        }\r\n\r\n        aggregate<TAccumulate>(seed: TAccumulate, accumulator: (acc: TAccumulate, cur: T) => TAccumulate): TAccumulate {\r\n            var active = seed;\r\n            for (var enumerator = this.getEnumerator(); enumerator.moveNext();) {\r\n                active = accumulator(active, enumerator.current);\r\n            }\r\n            return active;\r\n        }\r\n\r\n        all (predicate: IProjectionIndexFunc<T, boolean>): boolean {\r\n            if (predicate) {\r\n                var e = this.getEnumerator();\r\n                var i = 0;\r\n                while (e.moveNext()) {\r\n                    if (!predicate(e.current, i))\r\n                        return false;\r\n                    i++;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n\r\n        any (predicate?: IProjectionIndexFunc<T, boolean>): boolean {\r\n            var e = this.getEnumerator();\r\n            var i = 0;\r\n            while (e.moveNext()) {\r\n                if (!predicate)\r\n                    return true;\r\n                if (predicate(e.current, i))\r\n                    return true;\r\n                i++;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        apply<T>(action: IProjectionIndexFunc<T, any>): IEnumerableEx<T> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        at (index: number): T {\r\n            var e = this.getEnumerator();\r\n            var i = 0;\r\n            while (e.moveNext()) {\r\n                if (i === index)\r\n                    return e.current;\r\n                i++;\r\n            }\r\n            return undefined;\r\n        }\r\n\r\n        average (selector?: (t: T) => number): number {\r\n            var count = 0;\r\n            var total = 0;\r\n            selector = selector || function (t: T): number {\r\n                    if (typeof t !== \"number\") throw new Error(\"Object is not a number.\");\r\n                    return <number><any>t;\r\n                };\r\n            var e = this.getEnumerator();\r\n            while (e.moveNext()) {\r\n                total += selector(e.current);\r\n                count++;\r\n            }\r\n            if (count === 0) return 0;\r\n            return total / count;\r\n        }\r\n\r\n        concat (second: IEnumerable<T>): IEnumerableEx<T>;\r\n        concat (second: T[]): IEnumerableEx<T>;\r\n        concat (second: any): IEnumerableEx<T> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        count (predicate?: (t: T) => boolean): number {\r\n            var count = 0;\r\n            var e = this.getEnumerator();\r\n            while (e.moveNext()) {\r\n                if (!predicate || predicate(e.current))\r\n                    count++;\r\n            }\r\n            return count;\r\n        }\r\n\r\n        difference (second: IEnumerable<T>, comparer?: (f: T, s: T) => boolean): IDifference<T>;\r\n        difference (second: T[], comparer?: (f: T, s: T) => boolean): IDifference<T>;\r\n        difference (second: any, comparer?: (f: T, s: T) => boolean): IDifference<T> {\r\n            comparer = comparer || function (f2: T, s2: T) {\r\n                    return f2 === s2;\r\n                };\r\n            if (second instanceof Array)\r\n                second = second.en();\r\n            return {\r\n                intersection: this.intersect(second, comparer).toArray().en(),\r\n                aNotB: this.except(second, comparer).toArray().en(),\r\n                bNotA: second.except(this, comparer).toArray().en()\r\n            };\r\n        }\r\n\r\n        distinct (comparer?: (f: T, s: T) => boolean): IEnumerableEx<T> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        except (second: IEnumerable<T>, comparer?: (f: T, s: T) => boolean): IEnumerableEx<T>;\r\n        except (second: T[], comparer?: (f: T, s: T) => boolean): IEnumerableEx<T>;\r\n        except (second: any, comparer?: (f: T, s: T) => boolean): IEnumerableEx<T> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        first (match?: (t: T) => boolean): T {\r\n            var e = this.getEnumerator();\r\n            while (e.moveNext()) {\r\n                if (!match || match(e.current))\r\n                    return e.current;\r\n            }\r\n            return undefined;\r\n        }\r\n\r\n        firstIndex (match?: (t: T) => boolean): number {\r\n            for (var e = this.getEnumerator(), i = 0; e.moveNext(); i++) {\r\n                if (!match || match(e.current))\r\n                    return i;\r\n            }\r\n            return -1;\r\n        }\r\n\r\n        forEach (action: (t: T) => any) {\r\n            for (var en = this.getEnumerator(); en.moveNext();) {\r\n                action(en.current);\r\n            }\r\n        }\r\n\r\n        groupBy<TKey>(keySelector: (t: T) => TKey, comparer?: (k1: TKey, k2: TKey) => boolean): IEnumerableEx<IGrouping<TKey, T>> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        intersect (second: IEnumerable<T>, comparer?: (f: T, s: T) => boolean): IEnumerableEx<T>;\r\n        intersect (second: T[], comparer?: (f: T, s: T) => boolean): IEnumerableEx<T>;\r\n        intersect (second: any, comparer?: (f: T, s: T) => boolean): IEnumerableEx<T> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        join<TInner, TKey, TResult>(inner: IEnumerable<TInner>, outerKeySelector: (t: T) => TKey, innerKeySelector: (t: TInner) => TKey, resultSelector: (o: T, i: TInner) => TResult, comparer?: (k1: TKey, k2: TKey) => boolean): IEnumerableEx<TResult>;\r\n        join<TInner, TKey, TResult>(inner: TInner[], outerKeySelector: (t: T) => TKey, innerKeySelector: (t: TInner) => TKey, resultSelector: (o: T, i: TInner) => TResult, comparer?: (k1: TKey, k2: TKey) => boolean): IEnumerableEx<TResult>;\r\n        join<TInner, TKey, TResult>(inner: any, outerKeySelector: (t: T) => TKey, innerKeySelector: (t: TInner) => TKey, resultSelector: (o: T, i: TInner) => TResult, comparer?: (k1: TKey, k2: TKey) => boolean): IEnumerableEx<TResult> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        last (match?: (t: T) => boolean): T {\r\n            var e = this.getEnumerator();\r\n            var l: T;\r\n            while (e.moveNext()) {\r\n                if (!match || match(e.current))\r\n                    l = e.current;\r\n            }\r\n            return l;\r\n        }\r\n\r\n        lastIndex (match?: (t: T) => boolean): number {\r\n            var j = -1;\r\n            for (var e = this.getEnumerator(), i = 0; e.moveNext(); i++) {\r\n                if (!match || match(e.current))\r\n                    j = i;\r\n            }\r\n            return j;\r\n        }\r\n\r\n        max (selector?: (t: T) => number): number {\r\n            var e = this.getEnumerator();\r\n            if (!e.moveNext())\r\n                return 0;\r\n            selector = selector || function (t: T): number {\r\n                    if (typeof t !== \"number\") throw new Error(\"Object is not a number.\");\r\n                    return <number><any>t;\r\n                };\r\n            var max = selector(e.current);\r\n            while (e.moveNext()) {\r\n                max = Math.max(max, selector(e.current));\r\n            }\r\n            return max;\r\n        }\r\n\r\n        min (selector?: (t: T) => number): number {\r\n            var e = this.getEnumerator();\r\n            if (!e.moveNext())\r\n                return 0;\r\n            selector = selector || function (t: T): number {\r\n                    if (typeof t !== \"number\") throw new Error(\"Object is not a number.\");\r\n                    return <number><any>t;\r\n                };\r\n            var min = selector(e.current);\r\n            while (e.moveNext()) {\r\n                min = Math.min(min, selector(e.current));\r\n            }\r\n            return min;\r\n        }\r\n\r\n        orderBy<TKey>(keySelector: (t: T) => TKey, comparer?: (f: TKey, s: TKey) => number): IOrderedEnumerable<T> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        orderByDescending<TKey>(keySelector: (t: T) => TKey, comparer?: (f: TKey, s: TKey) => number): IOrderedEnumerable<T> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        reverse (): IEnumerableEx<T> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        select<TResult>(selector: IProjectionIndexFunc<T, TResult>): IEnumerableEx<TResult> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        selectMany<TResult>(selector: (t: T) => IEnumerable<TResult>): IEnumerableEx<TResult>;\r\n        selectMany<TResult>(selector: (t: T) => TResult[]): IEnumerableEx<TResult>;\r\n        selectMany<TResult>(selector: (t: T) => any): IEnumerableEx<TResult> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        skip (count: number): IEnumerableEx<T> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        skipWhile (predicate: IProjectionIndexFunc<T, boolean>): IEnumerableEx<T> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        standardDeviation (selector?: (t: T) => number): number {\r\n            var avg = this.average(selector);\r\n            var sum = 0;\r\n            var count = 0;\r\n            selector = selector || function (t: T): number {\r\n                    if (typeof t !== \"number\") throw new Error(\"Object is not a number.\");\r\n                    return <number><any>t;\r\n                };\r\n            var e = this.getEnumerator();\r\n            while (e.moveNext()) {\r\n                var diff = selector(e.current) - avg;\r\n                sum += (diff * diff);\r\n                count++;\r\n            }\r\n            return Math.sqrt(sum / count);\r\n        }\r\n\r\n        sum (selector?: (t: T) => number): number {\r\n            var sum = 0;\r\n            selector = selector || function (t: T): number {\r\n                    if (typeof t !== \"number\") throw new Error(\"Object is not a number.\");\r\n                    return <number><any>t;\r\n                };\r\n            var e = this.getEnumerator();\r\n            while (e.moveNext()) {\r\n                sum += selector(e.current);\r\n            }\r\n            return sum;\r\n        }\r\n\r\n        take (count: number): IEnumerableEx<T> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        takeWhile (predicate: IProjectionIndexFunc<T, boolean>): IEnumerableEx<T> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        traverse (selector: (t: T) => T[]): IEnumerableEx<T>;\r\n        traverse (selector: (t: T) => IEnumerable<T>): IEnumerableEx<T>;\r\n        traverse (selector: any): IEnumerableEx<T> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        traverseUnique (selector: (t: T) => T[], uniqueMatch?: (t1: T, t2: T) => boolean): IEnumerableEx<T>;\r\n        traverseUnique (selector: (t: T) => IEnumerable<T>, matcher?: (t1: T, t2: T) => boolean): IEnumerableEx<T>;\r\n        traverseUnique (selector: any, matcher?: (t1: T, t2: T) => boolean): IEnumerableEx<T> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        toArray (): T[] {\r\n            var arr: T[] = [];\r\n            var enumerator = this.getEnumerator();\r\n            while (enumerator.moveNext()) {\r\n                arr.push(enumerator.current);\r\n            }\r\n            return arr;\r\n        }\r\n\r\n        toMap<TKey, TValue>(keySelector: (t: T) => TKey, valueSelector: (t: T) => TValue): IMap<TKey, TValue> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        toList (): IList<T> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        //toDictionary() {\r\n        //}\r\n\r\n        union (second: IEnumerable<T>, comparer?: (f: T, s: T) => boolean): IEnumerableEx<T>;\r\n        union (second: T[], comparer?: (f: T, s: T) => boolean): IEnumerableEx<T>;\r\n        union (second: any, comparer?: (f: T, s: T) => boolean): IEnumerableEx<T> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        where (filter: (t: T) => boolean): IEnumerableEx<T> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n\r\n        zip<TSecond, TResult>(second: IEnumerable<TSecond>, resultSelector: (f: T, s: TSecond) => TResult): IEnumerableEx<TResult>;\r\n        zip<TSecond, TResult>(second: TSecond[], resultSelector: (f: T, s: TSecond) => TResult): IEnumerableEx<TResult>;\r\n        zip<TSecond, TResult>(second: any, resultSelector: (f: T, s: TSecond) => TResult): IEnumerableEx<TResult> {\r\n            throw new Error(\"Not implemented\");\r\n        }\r\n    }\r\n}",null,"/// <reference path=\"../enumerable.ts\" />\r\n\r\ndeclare\r\nvar global;\r\n\r\nmodule exjs {\r\n    export class Map3<TKey, TValue> implements IMap<TKey, TValue> {\r\n        size: number = 0;\r\n        private _keys: TKey[] = [];\r\n        private _values: TValue[] = [];\r\n\r\n        constructor();\r\n        constructor(enumerable: any[][]);\r\n        constructor(enumerable: IEnumerable<any[]>);\r\n        constructor(enumerable?: any) {\r\n            var enu: IEnumerable<any[]>;\r\n            if (enumerable instanceof Array) {\r\n                enu = (<Array<any[]>>enumerable).en();\r\n            } else if (enumerable && enumerable.getEnumerator instanceof Function) {\r\n                enu = <IEnumerable<any[]>>enumerable;\r\n            }\r\n\r\n            if (!enu)\r\n                return;\r\n            for (var en = enu.getEnumerator(); en && en.moveNext();) {\r\n                this.set(en.current[0], en.current[1]);\r\n            }\r\n        }\r\n\r\n        clear() {\r\n            this._keys.length = 0;\r\n            this._values.length = 0;\r\n            this.size = 0;\r\n        }\r\n\r\n        delete(key: TKey): boolean {\r\n            var index = this._keys.indexOf(key);\r\n            if (!(index > -1))\r\n                return false;\r\n            this._keys.splice(index, 1);\r\n            this._values.splice(index, 1);\r\n            this.size--;\r\n            return true;\r\n        }\r\n\r\n        entries(): IEnumerableEx<any[]> {\r\n            return exjs.range(0, this.size).select(i => [this._keys[i], this._values[i]]);\r\n        }\r\n\r\n        forEach(callbackFn: (value: TValue, key: TKey, map?: IMap<TKey, TValue>) => void, thisArg?: any) {\r\n            if (thisArg == null)\r\n                thisArg = this;\r\n            for (var i = 0, keys = this._keys, vals = this._values, len = keys.length; i < len; i++) {\r\n                callbackFn.call(thisArg, vals[i], keys[i], this);\r\n            }\r\n        }\r\n\r\n        get(key: TKey): TValue {\r\n            var index = this._keys.indexOf(key);\r\n            return this._values[index];\r\n        }\r\n\r\n        has(key: TKey): boolean {\r\n            return this._keys.indexOf(key) > -1;\r\n        }\r\n\r\n        keys(): IEnumerableEx<TKey> {\r\n            return this._keys.en();\r\n        }\r\n\r\n        set(key: TKey, value: TValue): any {\r\n            var index = this._keys.indexOf(key);\r\n            if (index > -1) {\r\n                this._values[index] = value;\r\n            } else {\r\n                this._keys.push(key);\r\n                this._values.push(value);\r\n                this.size++;\r\n            }\r\n            return undefined;\r\n        }\r\n\r\n        values(): IEnumerableEx<TValue> {\r\n            return this._values.en();\r\n        }\r\n    }\r\n\r\n    Enumerable.prototype.toMap = function<T, TKey, TValue> (keySelector: (t: T) => TKey, valueSelector: (t: T) => TValue): Map3<TKey, TValue> {\r\n        var m = new Map3<TKey, TValue>();\r\n        for (var en = this.getEnumerator(); en.moveNext();) {\r\n            m.set(keySelector(en.current), valueSelector(en.current));\r\n        }\r\n        return m;\r\n    };\r\n    if (List)\r\n        List.prototype.toMap = Enumerable.prototype.toMap;\r\n}\r\n\r\n(function (_global) {\r\n    if (!_global.Map)\r\n        _global.Map = exjs.Map3;\r\n})(typeof window === \"undefined\" ? global : window);\r\n","/// <reference path=\"enumerable.ts\" />\r\n\r\nmodule exjs {\r\n    function applyEnumerator<T>(prev: IEnumerable<T>, action: IProjectionIndexFunc<T, any>): IEnumerator<T> {\r\n        var t: IEnumerator<T>;\r\n        var i = 0;\r\n        var e = {\r\n            current: undefined,\r\n            moveNext: function (): boolean {\r\n                if (!t) t = prev.getEnumerator();\r\n                if (!t.moveNext()) return false;\r\n                action(e.current = t.current, i);\r\n                i++;\r\n                return true;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    Enumerable.prototype.apply = function<T>(action: IProjectionIndexFunc<T, any>): IEnumerableEx<T> {\r\n        var e = new Enumerable<T>();\r\n        e.getEnumerator = () => applyEnumerator(<IEnumerable<T>>this, action);\r\n        return e;\r\n    };\r\n    if (List)\r\n        List.prototype.apply = Enumerable.prototype.apply;\r\n}",null,"/// <reference path=\"enumerable.ts\" />\r\n\r\ninterface Array<T> {\r\n    en(): exjs.IEnumerableEx<T>;\r\n}\r\n\r\nmodule exjs {\r\n    function arrayEnumerator<T>(arr: T[]): IEnumerator<T> {\r\n        var len = arr.length;\r\n        var e = {moveNext: undefined, current: undefined};\r\n        var index = -1;\r\n        e.moveNext = function () {\r\n            index++;\r\n            if (index >= len) {\r\n                e.current = undefined;\r\n                return false;\r\n            }\r\n            e.current = arr[index];\r\n            return true;\r\n        };\r\n        return e;\r\n    }\r\n\r\n    class ArrayEnumerable<T> extends Enumerable<T> {\r\n        constructor(arr: T[]) {\r\n            super();\r\n\r\n            this.getEnumerator = function () {\r\n                return arrayEnumerator(arr);\r\n            };\r\n            this.toArray = function () {\r\n                return arr.slice(0);\r\n            };\r\n        }\r\n    }\r\n\r\n    function en<T>(): IEnumerableEx<T> {\r\n        if (this && Array.isArray(this))\r\n            return new ArrayEnumerable<T>(this);\r\n        return new Enumerable<T>();\r\n    }\r\n\r\n    try {\r\n        Object.defineProperty(Array.prototype, \"en\", {\r\n            value: en,\r\n            enumerable: false,\r\n            writable: false,\r\n            configurable: false\r\n        });\r\n    } catch (e) {\r\n        //IE8 supports Object.defineProperty only for DOM objects\r\n        (<any>Array.prototype).en = en;\r\n    }\r\n}","/// <reference path=\"enumerable.ts\" />\r\n\r\nmodule exjs {\r\n    function concatEnumerator<T>(prev:IEnumerable<T>, second:IEnumerable<T>):IEnumerator<T> {\r\n        var t:IEnumerator<T>;\r\n        var s = false;\r\n        var e = {\r\n            current: undefined,\r\n            moveNext: function ():boolean {\r\n                if (!t) t = prev.getEnumerator();\r\n                e.current = undefined;\r\n                if (t.moveNext()) {\r\n                    e.current = t.current;\r\n                    return true;\r\n                }\r\n                if (s) return false;\r\n                s = true;\r\n                t = second.getEnumerator();\r\n                if (!t.moveNext())\r\n                    return false;\r\n                e.current = t.current;\r\n                return true;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    Enumerable.prototype.concat = function<T>(second:any):IEnumerableEx<T> {\r\n        var en:IEnumerable<T> = second instanceof Array ? second.en() : second;\r\n        var e = new Enumerable<T>();\r\n        e.getEnumerator = () => concatEnumerator<T>(<IEnumerable<T>>this, en);\r\n        return e;\r\n    };\r\n    if (List)\r\n        List.prototype.concat = Enumerable.prototype.concat;\r\n}","/// <reference path=\"enumerable.ts\" />\r\n\r\nmodule exjs {\r\n    function distinctEnumerator<T>(prev: IEnumerable<T>, comparer?: (f: T, s: T) => boolean): IEnumerator<T> {\r\n        var t: IEnumerator<T>;\r\n        var visited = [];\r\n        var e = {\r\n            current: undefined,\r\n            moveNext: function (): boolean {\r\n                if (!t) t = prev.getEnumerator();\r\n                e.current = undefined;\r\n                if (!comparer) {\r\n                    while (t.moveNext()) {\r\n                        if (visited.indexOf(t.current) < 0) {\r\n                            visited.push(e.current = t.current);\r\n                            return true;\r\n                        }\r\n                    }\r\n                    return false;\r\n                }\r\n\r\n                while (t.moveNext()) {\r\n                    for (var i = 0, len = visited.length, hit = false; i < len && !hit; i++) {\r\n                        hit = !!comparer(visited[i], t.current);\r\n                    }\r\n                    if (!hit) {\r\n                        visited.push(e.current = t.current);\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    Enumerable.prototype.distinct = function<T>(comparer?: (f: T, s: T) => boolean): IEnumerableEx<T> {\r\n        var e = new Enumerable<T>();\r\n        e.getEnumerator = () => distinctEnumerator(<IEnumerable<T>>this, comparer);\r\n        return e;\r\n    };\r\n    if (List)\r\n        List.prototype.distinct = Enumerable.prototype.distinct;\r\n}","/// <reference path=\"enumerable.ts\" />\r\n\r\nmodule exjs {\r\n    function exceptEnumerator<T>(prev: IEnumerable<T>, second: IEnumerable<T>, comparer?: (f: T, s: T) => boolean): IEnumerator<T> {\r\n        comparer = comparer || function (f: T, s: T) {\r\n            return f === s;\r\n        };\r\n        var t: IEnumerator<T>;\r\n        var e = {\r\n            current: undefined,\r\n            moveNext: function (): boolean {\r\n                if (!t) t = prev.getEnumerator();\r\n                e.current = undefined;\r\n                while (t.moveNext()) {\r\n                    for (var hit = false, x = second.getEnumerator(); x.moveNext() && !hit;) {\r\n                        hit = comparer(t.current, x.current);\r\n                    }\r\n                    if (!hit) {\r\n                        e.current = t.current;\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    Enumerable.prototype.except = function<T>(second: any, comparer?: (f: T, s: T) => boolean): IEnumerableEx<T> {\r\n        var en: IEnumerable<T> = second instanceof Array ? second.en() : second;\r\n        var e = new Enumerable<T>();\r\n        e.getEnumerator = () => exceptEnumerator(<IEnumerable<T>>this, en, comparer);\r\n        return e;\r\n    };\r\n    if (List)\r\n        List.prototype.except = Enumerable.prototype.except;\r\n} ","interface Function {\r\n    fromJson<T>(o: any, mappingOverrides?: any): T;\r\n}\r\n\r\nFunction.prototype.fromJson = function<T>(o: any, mappingOverrides?: any): T {\r\n    var rv = new this();\r\n    if (o == null)\r\n        return rv;\r\n\r\n    var mapped: string[] = [];\r\n\r\n    for (var key in mappingOverrides) {\r\n        var j = mapSubProperty(o[key], mappingOverrides[key]);\r\n        if (j === undefined)\r\n            continue;\r\n        rv[key] = j;\r\n        mapped.push(key);\r\n    }\r\n\r\n    for (var key in this.$jsonMappings) {\r\n        if (mapped.indexOf(key) > -1)\r\n            continue;\r\n        var j = mapSubProperty(o[key], this.$jsonMappings[key]);\r\n        if (j === undefined)\r\n            continue;\r\n        rv[key] = j;\r\n        mapped.push(key);\r\n    }\r\n\r\n    for (var key in o) {\r\n        if (mapped.indexOf(key) > -1)\r\n            continue;\r\n        rv[key] = o[key];\r\n    }\r\n\r\n    return rv;\r\n\r\n    function mapSubProperty(j: any, mapping: any): any {\r\n        if (j == null)\r\n            return j;\r\n        if (mapping instanceof Function)\r\n            return mapping(j);\r\n        if (mapping instanceof Array) {\r\n            mapping = mapping[0];\r\n            if (!(mapping instanceof Function) || !(j instanceof Array))\r\n                return undefined;\r\n            var arr = [];\r\n            for (var i = 0; i < j.length; i++) {\r\n                arr.push(mapping(j[i]));\r\n            }\r\n            return arr;\r\n        }\r\n        return undefined;\r\n    }\r\n};","/// <reference path=\"enumerable.ts\" />\r\n/// <reference path=\"array.ts\" />\r\n\r\nmodule exjs {\r\n    function groupByEnumerator<T, TKey>(prev: IEnumerable<T>, keySelector: (t: T) => TKey, comparer?: (k1: TKey, k2: TKey) => boolean): IEnumerator<IGrouping<TKey, T>> {\r\n        var grps: IGrouping<TKey, T>[];\r\n        var i = 0;\r\n        var e = {\r\n            current: undefined,\r\n            moveNext: function (): boolean {\r\n                if (!grps) grps = createGroups<TKey, T>(prev, keySelector, comparer);\r\n                e.current = undefined;\r\n                if (i >= grps.length)\r\n                    return false;\r\n                e.current = grps[i];\r\n                i++;\r\n                return true;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    function createGroups<TKey, TElement>(prev: IEnumerable<TElement>, keySelector: (t: TElement) => TKey, comparer?: (k1: TKey, k2: TKey) => boolean): IGrouping<TKey, TElement>[] {\r\n        comparer = comparer || function (k1, k2) {\r\n            return k1 === k2;\r\n        };\r\n        var grps: Group<TKey, TElement>[] = [];\r\n        var keys: TKey[] = [];\r\n\r\n        var e = prev.getEnumerator();\r\n        var key: TKey;\r\n        while (e.moveNext()) {\r\n            key = keySelector(e.current);\r\n            var index = -1;\r\n            for (var i = 0, len = keys.length; i < len; i++) {\r\n                if (comparer(key, keys[i])) {\r\n                    index = i;\r\n                    break;\r\n                }\r\n            }\r\n            var grp: Group<TKey, TElement>;\r\n            if (index < 0) {\r\n                keys.push(key);\r\n                grps.push(grp = new Group<TKey, TElement>(key));\r\n            } else {\r\n                grp = grps[index];\r\n            }\r\n            grp._add(e.current);\r\n        }\r\n\r\n        return grps;\r\n    }\r\n\r\n    class Group<TKey, TElement> extends Enumerable<TElement> implements IGrouping<TKey, TElement> {\r\n        private _arr: TElement[] = [];\r\n\r\n        constructor (public key: TKey) {\r\n            super();\r\n            this.getEnumerator = () => this._arr.en().getEnumerator();\r\n        }\r\n\r\n        _add (e: TElement) {\r\n            this._arr.push(e);\r\n        }\r\n    }\r\n\r\n    Enumerable.prototype.groupBy = function<T, TKey>(keySelector: (t: T) => TKey, comparer?: (k1: TKey, k2: TKey) => boolean): IEnumerableEx<IGrouping<TKey, T>> {\r\n        var e = new Enumerable<IGrouping<TKey, T>>();\r\n        e.getEnumerator = () => groupByEnumerator<T, TKey>(<IEnumerable<T>>this, keySelector, comparer);\r\n        return e;\r\n    };\r\n    if (List)\r\n        List.prototype.groupBy = Enumerable.prototype.groupBy;\r\n}","/// <reference path=\"enumerable.ts\" />\r\n\r\nmodule exjs {\r\n    function intersectEnumerator<T>(prev: IEnumerable<T>, second: IEnumerable<T>, comparer?: (f: T, s: T) => boolean): IEnumerator<T> {\r\n        comparer = comparer || function (f: T, s: T) { return f === s; };\r\n        var t: IEnumerator<T>;\r\n        var e = {\r\n            current: undefined,\r\n            moveNext: function (): boolean {\r\n                if (!t) t = en(prev).distinct().getEnumerator();\r\n                e.current = undefined;\r\n                while (t.moveNext()) {\r\n                    for (var hit = false, x = second.getEnumerator(); x.moveNext() && !hit;) {\r\n                        hit = comparer(t.current, x.current);\r\n                    }\r\n                    if (hit) {\r\n                        e.current = t.current;\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    Enumerable.prototype.intersect = function<T>(second: any, comparer?: (f: T, s: T) => boolean): IEnumerableEx<T> {\r\n        var en: IEnumerable<T> = second instanceof Array ? second.en() : second;\r\n        var e = new Enumerable<T>();\r\n        e.getEnumerator = () => intersectEnumerator(<IEnumerable<T>>this, en, comparer);\r\n        return e;\r\n    };\r\n    if (List)\r\n        List.prototype.intersect = Enumerable.prototype.intersect;\r\n}  ","/// <reference path=\"enumerable.ts\" />\r\n\r\nmodule exjs {\r\n    function joinEnumerator<TOuter, TInner, TKey, TResult>(prev: IEnumerable<TOuter>, inner: IEnumerable<TInner>, outerKeySelector: (t: TOuter) => TKey, innerKeySelector: (t: TInner) => TKey, resultSelector: (tout: TOuter, tin: TInner) => TResult, comparer?: (k1: TKey, k2: TKey) => boolean): IEnumerator<TResult> {\r\n        comparer = comparer || function (k1, k2) {\r\n            return k1 === k2;\r\n        };\r\n        var s: IEnumerator<TOuter>;\r\n        var ins: TInner[];\r\n        var j = 0;\r\n        var e = {\r\n            current: undefined,\r\n            moveNext: function (): boolean {\r\n                e.current = undefined;\r\n                if (!s) {\r\n                    s = prev.getEnumerator();\r\n                    if (!s.moveNext())\r\n                        return false;\r\n                    ins = en(inner).toArray();\r\n                }\r\n\r\n                var cur: TInner;\r\n                do {\r\n                    for (; j < ins.length; j++) {\r\n                        cur = ins[j];\r\n                        if (comparer(outerKeySelector(s.current), innerKeySelector(cur))) {\r\n                            j++;\r\n                            e.current = resultSelector(s.current, cur);\r\n                            return true;\r\n                        }\r\n                    }\r\n                    j = 0;\r\n                } while (s.moveNext());\r\n                return false;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    Enumerable.prototype.join = function<T,TInner,TKey,TResult>(inner: any, outerKeySelector: (t: T) => TKey, innerKeySelector: (t: TInner) => TKey, resultSelector: (o: T, i: TInner) => TResult, comparer?: (k1: TKey, k2: TKey) => boolean): IEnumerableEx<TResult> {\r\n        var en: IEnumerable<TInner> = inner instanceof Array ? inner.en() : inner;\r\n        var e = new Enumerable<TResult>();\r\n        e.getEnumerator = () => joinEnumerator<T, TInner, TKey, TResult>(<IEnumerable<T>>this, en, outerKeySelector, innerKeySelector, resultSelector, comparer);\r\n        return e;\r\n    };\r\n    if (List)\r\n        List.prototype.join = Enumerable.prototype.join;\r\n}","/// <reference path=\"enumerable.ts\" />\r\n/// <reference path=\"fromJson.ts\" />\r\n\r\nmodule exjs {\r\n    Enumerable.prototype.toList = function<T>() {\r\n        var l = new List<T>();\r\n\r\n        var enumerator = this.getEnumerator();\r\n        while (enumerator.moveNext()) {\r\n            l.push(enumerator.current);\r\n        }\r\n\r\n        return <IList<T>>l;\r\n    };\r\n\r\n    export class List<T> extends Enumerable<T> implements IList<T> {\r\n        //Array<T> methods\r\n        toString (): string { throw new Error(\"Not implemented\"); }\r\n        toLocaleString (): string { throw new Error(\"Not implemented\"); }\r\n        pop (): T { throw new Error(\"Not implemented\"); }\r\n        push (...items: T[]): number { throw new Error(\"Not implemented\"); }\r\n        shift (): T { throw new Error(\"Not implemented\"); }\r\n        slice (start: number, end?: number): T[] { throw new Error(\"Not implemented\"); }\r\n        sort (compareFn?: (a: T, b: T) => number): T[] { throw new Error(\"Not implemented\"); }\r\n\r\n        splice (start: number): T[];\r\n        splice (start: number, deleteCount: number, ...items: T[]): T[];\r\n        splice (): T[] { throw new Error(\"Not implemented\"); }\r\n\r\n        unshift (...items: T[]): number { throw new Error(\"Not implemented\"); }\r\n        indexOf (searchElement: T, fromIndex?: number): number { throw new Error(\"Not implemented\"); }\r\n        lastIndexOf (searchElement: T, fromIndex?: number): number { throw new Error(\"Not implemented\"); }\r\n        every (callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg?: any): boolean { throw new Error(\"Not implemented\"); }\r\n        some (callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg?: any): boolean { throw new Error(\"Not implemented\"); }\r\n        forEach (callbackfn: (value: T, index: number, array: T[]) => void, thisArg?: any): void { throw new Error(\"Not implemented\"); }\r\n        map<U>(callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): U[] { throw new Error(\"Not implemented\"); }\r\n        filter (callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg?: any): T[] { throw new Error(\"Not implemented\"); }\r\n        reduce<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U { throw new Error(\"Not implemented\"); }\r\n        reduceRight<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U { throw new Error(\"Not implemented\"); }\r\n        length: number;\r\n        [n: number]: T;\r\n\r\n        //List<T> methods\r\n        remove(item: T): boolean { throw new Error(\"Not implemented\"); }\r\n        removeWhere(predicate: (t: T, index?: number) => boolean): IEnumerableEx<T> { throw new Error(\"Not implemented\"); }\r\n    }\r\n\r\n    for (var p in Array) if (Array.hasOwnProperty(p)) List[p] = Array[p];\r\n    function __ () { this.constructor = List; }\r\n    __.prototype = Array.prototype;\r\n    List.prototype = new __();\r\n    for (var key in Enumerable.prototype) {\r\n        if (key === \"getEnumerator\")\r\n            continue;\r\n        List.prototype[key] = Enumerable.prototype[key];\r\n    }\r\n\r\n    List.prototype.getEnumerator = function<T>(): IEnumerator<T> {\r\n        var list = this;\r\n        var len = list.length;\r\n        var e = { moveNext: undefined, current: undefined };\r\n        var index = -1;\r\n        e.moveNext = function () {\r\n            index++;\r\n            if (index >= len) {\r\n                e.current = undefined;\r\n                return false;\r\n            }\r\n            e.current = list[index];\r\n            return true;\r\n        };\r\n        return e;\r\n    };\r\n    List.prototype.remove = function<T>(item: T): boolean {\r\n        return this.removeWhere(t => t === item).any();\r\n    };\r\n    List.prototype.removeWhere = function<T>(predicate: (t: T, index?: number) => boolean): IEnumerableEx<T> {\r\n        var removed = [];\r\n        var cur: T;\r\n        for (var i = this.length - 1; i >= 0; i--) {\r\n            cur = this[i];\r\n            if (predicate(cur, i) === true) {\r\n                this.splice(i, 1);\r\n                removed.push(cur);\r\n            }\r\n        }\r\n        return removed.en().reverse();\r\n    };\r\n}","/// <reference path=\"enumerable.ts\" />\r\n\r\nmodule exjs {\r\n    function orderByEnumerable<T, TKey>(source: IEnumerable<T>, keySelector: (t: T) => TKey, isDescending: boolean, comparer?: (f: TKey, s: TKey) => number): IOrderedEnumerable<T> {\r\n        return new OrderedEnumerable<T, TKey>(source, keySelector, isDescending, comparer);\r\n    }\r\n\r\n    class OrderedEnumerable<T, TKey> extends Enumerable<T> implements IOrderedEnumerable<T> {\r\n        Source: IEnumerable<T>;\r\n        Sorter: (a: T, b: T) => number;\r\n\r\n        constructor (source: IEnumerable<T>, keySelector: (t: T) => TKey, isDescending: boolean, keyComparer: (f: TKey, s: TKey) => number) {\r\n            super();\r\n\r\n            this.Source = source;\r\n            keyComparer = keyComparer || function (f: TKey, s: TKey) {\r\n                return f > s ? 1 : (f < s ? -1 : 0);\r\n            };\r\n            var factor = (isDescending === true) ? -1 : 1;\r\n            this.Sorter = (a, b) => factor * keyComparer(keySelector(a), keySelector(b));\r\n        }\r\n\r\n        getEnumerator (): IEnumerator<T> {\r\n            var source = this.Source;\r\n            var sorter = this.Sorter;\r\n            var arr: T[];\r\n            var i = 0;\r\n            var e = {\r\n                current: undefined,\r\n                moveNext: function (): boolean {\r\n                    if (!arr) {\r\n                        arr = en(source).toArray();\r\n                        arr.sort(sorter);\r\n                    }\r\n                    e.current = undefined;\r\n                    if (i >= arr.length)\r\n                        return false;\r\n                    e.current = arr[i];\r\n                    i++;\r\n                    return true;\r\n                }\r\n            };\r\n            return e;\r\n        }\r\n\r\n        thenBy<TInnerKey>(keySelector: (t: T) => TInnerKey, comparer?: (f: TInnerKey, s: TInnerKey) => number): IOrderedEnumerable<T> {\r\n            return new ThenEnumerable<T, TKey, TInnerKey>(this, keySelector, false, comparer);\r\n        }\r\n\r\n        thenByDescending<TInnerKey>(keySelector: (t: T) => TInnerKey, comparer?: (f: TInnerKey, s: TInnerKey) => number): IOrderedEnumerable<T> {\r\n            return new ThenEnumerable<T, TKey, TInnerKey>(this, keySelector, true, comparer);\r\n        }\r\n    }\r\n\r\n    class ThenEnumerable<T, TParentKey, TKey> extends OrderedEnumerable<T, TKey> {\r\n        constructor (source: OrderedEnumerable<T, TParentKey>, keySelector: (t: T) => TKey, isDescending: boolean, keyComparer: (f: TKey, s: TKey) => number) {\r\n            super(source, keySelector, isDescending, keyComparer);\r\n\r\n            var parentSorter = source.Sorter;\r\n            var thisSorter = this.Sorter;\r\n            this.Sorter = (a, b) => parentSorter(a, b) || thisSorter(a, b);\r\n        }\r\n    }\r\n\r\n    var fn = Enumerable.prototype;\r\n    fn.orderBy = function<T,TKey>(keySelector: (t: T) => TKey, comparer?: (f: TKey, s: TKey) => number): IOrderedEnumerable<T> {\r\n        return orderByEnumerable(<IEnumerable<T>>this, keySelector, false, comparer);\r\n    };\r\n    fn.orderByDescending = function<T,TKey>(keySelector: (t: T) => TKey, comparer?: (f: TKey, s: TKey) => number): IOrderedEnumerable<T> {\r\n        return orderByEnumerable(<IEnumerable<T>>this, keySelector, true, comparer);\r\n    };\r\n    if (List) {\r\n        List.prototype.orderBy = Enumerable.prototype.orderBy;\r\n        List.prototype.orderByDescending = Enumerable.prototype.orderByDescending;\r\n    }\r\n} ","/// <reference path=\"enumerable.ts\" />\r\n\r\nmodule exjs {\r\n    function rangeEnumerator (start: number, end: number, increment: number): IEnumerator<number> {\r\n        var i = start - increment;\r\n        var e = {\r\n            current: undefined,\r\n            moveNext: function (): boolean {\r\n                i += increment;\r\n                if (i >= end)\r\n                    return false;\r\n                e.current = i;\r\n                return true;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    export function range (start: number, end: number, increment?: number): IEnumerableEx<number> {\r\n        start = start || 0;\r\n        end = end || 0;\r\n        if (start > end)\r\n            throw new Error(\"Start cannot be greater than end.\");\r\n        if (increment == null)\r\n            increment = 1;\r\n        var e = new Enumerable<number>();\r\n        e.getEnumerator = () => rangeEnumerator(start, end, increment);\r\n        return e;\r\n    }\r\n}","/// <reference path=\"enumerable.ts\" />\r\n\r\nmodule exjs {\r\n    function reverseEnumerator<T>(prev: IEnumerable<T>): IEnumerator<T> {\r\n        var a: T[];\r\n        var i = 0;\r\n        var e = {\r\n            current: undefined,\r\n            moveNext: function (): boolean {\r\n                if (!a) {\r\n                    a = en(prev).toArray();\r\n                    i = a.length;\r\n                }\r\n                i--;\r\n                e.current = a[i];\r\n                return i >= 0;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    Enumerable.prototype.reverse = function<T>(): IEnumerableEx<T> {\r\n        var e = new Enumerable<T>();\r\n        e.getEnumerator = () => reverseEnumerator(<IEnumerable<T>>this);\r\n        return e;\r\n    };\r\n    if (List)\r\n        List.prototype.reverse = Enumerable.prototype.reverse;\r\n}","module exjs {\r\n    export function round(value: number, digits?: number) {\r\n        digits = digits || 0;\r\n        if (digits === 0)\r\n            return Math.round(value);\r\n        var shift = Math.pow(10, digits);\r\n        return Math.round(value * shift) / shift;\r\n    }\r\n}","/// <reference path=\"enumerable.ts\" />\r\n/// <reference path=\"array.ts\" />\r\n\r\nmodule exjs {\r\n    function selectEnumerator<T, TResult>(prev: IEnumerable<T>, selector: IProjectionIndexFunc<T, TResult>): IEnumerator<TResult> {\r\n        var t: IEnumerator<T>;\r\n        var i = 0;\r\n        var e = {\r\n            current: undefined,\r\n            moveNext: function (): boolean {\r\n                if (!t) t = prev.getEnumerator();\r\n                if (!t.moveNext()) return false;\r\n                e.current = selector(t.current, i);\r\n                i++;\r\n                return true;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    function selectManyEnumerator<T, TResult>(prev: IEnumerable<T>, selector: (t: T) => any): IEnumerator<TResult> {\r\n        var t: IEnumerator<T>;\r\n        var active: IEnumerator<TResult>;\r\n        var e = {\r\n            current: undefined,\r\n            moveNext: function (): boolean {\r\n                e.current = undefined;\r\n                if (!t) t = prev.getEnumerator();\r\n                while (!active || !active.moveNext()) {\r\n                    if (!t.moveNext())\r\n                        return false;\r\n                    active = selectorEnumerator<T, TResult>(selector(t.current));\r\n                }\r\n                e.current = active.current;\r\n                return true;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    Enumerable.prototype.select = function<T,TResult>(selector: IProjectionIndexFunc<T, TResult>): IEnumerableEx<TResult> {\r\n        var e = new Enumerable<TResult>();\r\n        e.getEnumerator = () => selectEnumerator(<IEnumerable<T>>this, selector);\r\n        return e;\r\n    };\r\n    Enumerable.prototype.selectMany = function<T,TResult>(selector: (t: T) => any): IEnumerableEx<TResult> {\r\n        var e = new Enumerable<TResult>();\r\n        e.getEnumerator = () => selectManyEnumerator<T, TResult>(<IEnumerable<T>>this, selector);\r\n        return e;\r\n    };\r\n    if (List) {\r\n        List.prototype.select = Enumerable.prototype.select;\r\n        List.prototype.selectMany = Enumerable.prototype.selectMany;\r\n    }\r\n}","module exjs {\r\n    export function selectorEnumerator<T, TResult>(en: IEnumerable<T>): IEnumerator<TResult>;\r\n    export function selectorEnumerator<T, TResult>(arr: T[]): IEnumerator<TResult>;\r\n    export function selectorEnumerator<T, TResult>(obj: any) {\r\n        if (Array.isArray(obj))\r\n            return (<T[]>obj).en().getEnumerator();\r\n        if (obj != null && typeof obj.getEnumerator === \"function\")\r\n            return obj.getEnumerator();\r\n        return null;\r\n    }\r\n}","/// <reference path=\"enumerable.ts\" />\r\n\r\nmodule exjs {\r\n    function skipEnumerator<T>(prev: IEnumerable<T>, count: number): IEnumerator<T> {\r\n        var t: IEnumerator<T>;\r\n        var e = {\r\n            current: undefined,\r\n            moveNext: function (): boolean {\r\n                if (!t) {\r\n                    t = prev.getEnumerator();\r\n                    for (var i = 0; i < count; i++) {\r\n                        if (!t.moveNext()) return false;\r\n                    }\r\n                }\r\n\r\n                if (!t.moveNext()) {\r\n                    e.current = undefined;\r\n                    return false;\r\n                }\r\n\r\n                e.current = t.current;\r\n                return true;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    function skipWhileEnumerator<T>(prev: IEnumerable<T>, predicate: IProjectionIndexFunc<T, boolean>): IEnumerator<T> {\r\n        var t: IEnumerator<T>;\r\n        var e = {\r\n            current: undefined,\r\n            moveNext: function (): boolean {\r\n                if (!t) {\r\n                    t = prev.getEnumerator();\r\n                    for (var i = 0; t.moveNext(); i++) {\r\n                        if (!predicate(e.current = t.current, i))\r\n                            return true;\r\n                    }\r\n                    e.current = undefined;\r\n                    return false;\r\n                }\r\n\r\n                if (!t.moveNext()) {\r\n                    e.current = undefined;\r\n                    return false;\r\n                }\r\n\r\n                e.current = t.current;\r\n                return true;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    Enumerable.prototype.skip = function<T>(count: number): IEnumerableEx<T> {\r\n        var e = new Enumerable<T>();\r\n        e.getEnumerator = () => skipEnumerator(<IEnumerable<T>>this, count);\r\n        return e;\r\n    };\r\n    Enumerable.prototype.skipWhile = function<T>(predicate: IProjectionIndexFunc<T, boolean>): IEnumerableEx<T> {\r\n        var e = new Enumerable<T>();\r\n        e.getEnumerator = () => skipWhileEnumerator(<IEnumerable<T>>this, predicate);\r\n        return e;\r\n    };\r\n    if (List) {\r\n        List.prototype.skip = Enumerable.prototype.skip;\r\n        List.prototype.skipWhile = Enumerable.prototype.skipWhile;\r\n    }\r\n}","/// <reference path=\"enumerable.ts\" />\r\n\r\nmodule exjs {\r\n    function takeEnumerator<T>(prev: IEnumerable<T>, count: number): IEnumerator<T> {\r\n        var t: IEnumerator<T>;\r\n        var i = 0;\r\n        var e = {\r\n            current: undefined,\r\n            moveNext: function (): boolean {\r\n                if (!t) t = prev.getEnumerator();\r\n                i++;\r\n                if (i > count)\r\n                    return false;\r\n                e.current = undefined;\r\n                if (!t.moveNext())\r\n                    return false;\r\n                e.current = t.current;\r\n                return true;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    function takeWhileEnumerator<T>(prev: IEnumerable<T>, predicate: IProjectionIndexFunc<T, boolean>): IEnumerator<T> {\r\n        var t: IEnumerator<T>;\r\n        var i = 0;\r\n        var e = {\r\n            current: undefined,\r\n            moveNext: function (): boolean {\r\n                if (!t) t = prev.getEnumerator();\r\n\r\n                if (!t.moveNext() || !predicate(t.current, i)) {\r\n                    e.current = undefined;\r\n                    return false;\r\n                }\r\n                i++;\r\n\r\n                e.current = t.current;\r\n                return true;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    Enumerable.prototype.take = function<T>(count: number): IEnumerableEx<T> {\r\n        var e = new Enumerable<T>();\r\n        e.getEnumerator = () => takeEnumerator(<IEnumerable<T>>this, count);\r\n        return e;\r\n    };\r\n    Enumerable.prototype.takeWhile = function<T>(predicate: IProjectionIndexFunc<T, boolean>): IEnumerableEx<T> {\r\n        var e = new Enumerable<T>();\r\n        e.getEnumerator = () => takeWhileEnumerator(<IEnumerable<T>>this, predicate);\r\n        return e;\r\n    };\r\n    if (List) {\r\n        List.prototype.take = Enumerable.prototype.take;\r\n        List.prototype.takeWhile = Enumerable.prototype.takeWhile;\r\n    }\r\n}","/// <reference path=\"enumerable.ts\" />\r\n\r\nmodule exjs {\r\n    function traverseEnumerator<T>(prev: IEnumerable<T>, selector: (t: T) => IEnumerable<T>): IEnumerator<T> {\r\n        var started = false;\r\n        var enstack: IEnumerator<T>[] = [];\r\n        var t: IEnumerator<T>;\r\n        var e = {\r\n            current: undefined,\r\n            moveNext (): boolean {\r\n                if (!started) {\r\n                    t = prev.getEnumerator();\r\n                    started = true;\r\n                } else if (t == null) {\r\n                    return false;\r\n                } else {\r\n                    enstack.push(t);\r\n                    t = selectorEnumerator<T, T>(selector(e.current));\r\n                }\r\n\r\n                while (!t || !t.moveNext()) {\r\n                    if (enstack.length < 1)\r\n                        break;\r\n                    t = enstack.pop();\r\n                }\r\n\r\n                e.current = t == null ? undefined : t.current;\r\n                return e.current !== undefined;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    function traverseUniqueEnumerator<T>(prev: IEnumerable<T>, selector: (t: T)=>IEnumerable<T>, turnstile: (t: T) => boolean): IEnumerator<T> {\r\n        var started = false;\r\n        var enstack: IEnumerator<T>[] = [];\r\n        var t: IEnumerator<T>;\r\n        var e = {\r\n            current: undefined,\r\n            moveNext (): boolean {\r\n                if (!started) {\r\n                    t = prev.getEnumerator();\r\n                    started = true;\r\n                } else if (t == null) {\r\n                    return false;\r\n                } else {\r\n                    enstack.push(t);\r\n                    t = selectorEnumerator<T, T>(selector(e.current));\r\n                }\r\n\r\n                do {\r\n                    while (!t || !t.moveNext()) {\r\n                        if (enstack.length < 1)\r\n                            break;\r\n                        t = enstack.pop();\r\n                    }\r\n                    e.current = t == null ? undefined : t.current;\r\n                } while (turnstile(e.current));\r\n\r\n                return e.current !== undefined;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    Enumerable.prototype.traverse = function<T>(selector: any): IEnumerableEx<T> {\r\n        var e = new Enumerable<T>();\r\n        e.getEnumerator = () => traverseEnumerator(<IEnumerable<T>>this, selector);\r\n        return e;\r\n    };\r\n    Enumerable.prototype.traverseUnique = function<T>(selector: any, matcher?: (t1: T, t2: T) => boolean): IEnumerableEx<T> {\r\n        var existing: T[] = [];\r\n        var e = new Enumerable<T>();\r\n        if (matcher) {\r\n            e.getEnumerator = () => traverseUniqueEnumerator(<IEnumerable<T>>this, selector, (x: T) => {\r\n                if (existing.some(e => matcher(x, e)))\r\n                    return true;\r\n                existing.push(x);\r\n                return false;\r\n            });\r\n        } else {\r\n            e.getEnumerator = () => traverseUniqueEnumerator(<IEnumerable<T>>this, selector, (x: T) => {\r\n                if (existing.indexOf(x) > -1)\r\n                    return true;\r\n                existing.push(x);\r\n                return false;\r\n            });\r\n        }\r\n        return e;\r\n    };\r\n    if (List) {\r\n        List.prototype.traverse = Enumerable.prototype.traverse;\r\n        List.prototype.traverseUnique = Enumerable.prototype.traverseUnique;\r\n    }\r\n}","/// <reference path=\"enumerable.ts\" />\r\n\r\nmodule exjs {\r\n    function unionEnumerator<T>(prev: IEnumerable<T>, second: IEnumerable<T>, comparer?: (f: T, s: T) => boolean): IEnumerator<T> {\r\n        comparer = comparer || function (f: T, s: T) {\r\n            return f === s;\r\n        };\r\n        var t: IEnumerator<T>;\r\n        var visited: T[] = [];\r\n        var s: IEnumerator<T>;\r\n        var e = {\r\n            current: undefined,\r\n            moveNext: function (): boolean {\r\n                if (!t) t = en(prev).distinct().getEnumerator();\r\n                e.current = undefined;\r\n                if (!s && t.moveNext()) {\r\n                    visited.push(e.current = t.current);\r\n                    return true;\r\n                }\r\n                s = s || en(second).distinct().getEnumerator();\r\n                while (s.moveNext()) {\r\n                    for (var i = 0, hit = false, len = visited.length; i < len && !hit; i++) {\r\n                        hit = comparer(visited[i], s.current);\r\n                    }\r\n                    if (!hit) {\r\n                        e.current = s.current;\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    Enumerable.prototype.union = function<T>(second: any, comparer?: (f: T, s: T) => boolean): IEnumerableEx<T> {\r\n        var en:IEnumerable<T> = second instanceof Array ? second.en() : second;\r\n        var e = new Enumerable<T>();\r\n        e.getEnumerator = () => unionEnumerator(<IEnumerable<T>>this, en, comparer);\r\n        return e;\r\n    };\r\n    if (List)\r\n        List.prototype.union = Enumerable.prototype.union;\r\n}","/// <reference path=\"enumerable.ts\" />\r\n\r\nmodule exjs {\r\n    function whereEnumerator<T>(prev: IEnumerable<T>, filter: (t: T) => boolean): IEnumerator<T> {\r\n        var t: IEnumerator<T>;\r\n        var e = {\r\n            current: undefined,\r\n            moveNext: function (): boolean {\r\n                if (!t) t = prev.getEnumerator();\r\n                var c: T;\r\n                while (t.moveNext()) {\r\n                    if (filter(c = t.current)) {\r\n                        e.current = c;\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    Enumerable.prototype.where = function<T>(filter: (t: T) => boolean): IEnumerableEx<T> {\r\n        var e = new Enumerable<T>();\r\n        e.getEnumerator = () => whereEnumerator(<IEnumerable<T>>this, filter);\r\n        return e;\r\n    };\r\n    if (List)\r\n        List.prototype.where = Enumerable.prototype.where;\r\n}","module exjs {\r\n    export function en<T>(enu: IEnumerable<T>): IEnumerableEx<T> {\r\n        var x = new Enumerable<T>();\r\n        x.getEnumerator = function (): IEnumerator<T> {\r\n            return wrapEnumerator<T>(enu);\r\n        };\r\n        return <IEnumerableEx<T>>x;\r\n    }\r\n\r\n    function wrapEnumerator<T>(enu: IEnumerable<T>): IEnumerator<T> {\r\n        var wrapped = enu.getEnumerator();\r\n        var x = <IEnumerator<T>>{ current: undefined, moveNext: undefined };\r\n        x.moveNext = function (): boolean {\r\n            if (wrapped.moveNext()) {\r\n                x.current = wrapped.current;\r\n                return true;\r\n            }\r\n            x.current = undefined;\r\n            return false;\r\n        };\r\n        return x;\r\n    }\r\n}\r\nvar ex = exjs.en;","/// <reference path=\"enumerable.ts\" />\r\n\r\nmodule exjs {\r\n    function zipEnumerator<T, TSecond, TResult>(prev: IEnumerable<T>, second: IEnumerable<TSecond>, resultSelector: (f: T, s: TSecond) => TResult): IEnumerator<TResult> {\r\n        var s: IEnumerator<T>;\r\n        var t: IEnumerator<TSecond>;\r\n        var e = {\r\n            current: undefined,\r\n            moveNext: function (): boolean {\r\n                if (!s) s = prev.getEnumerator();\r\n                if (!t) t = second.getEnumerator();\r\n                e.current = undefined;\r\n                if (!s.moveNext() || !t.moveNext())\r\n                    return false;\r\n                e.current = resultSelector(s.current, t.current);\r\n                return true;\r\n            }\r\n        };\r\n        return e;\r\n    }\r\n\r\n    Enumerable.prototype.zip = function<T, TSecond,TResult>(second: any, resultSelector: (f: T, s: TSecond) => TResult): IEnumerableEx<TResult> {\r\n        var en: IEnumerable<TSecond> = second instanceof Array ? second.en() : second;\r\n        var e = new Enumerable<TResult>();\r\n        e.getEnumerator = () => zipEnumerator<T, TSecond, TResult>(<IEnumerable<T>>this, en, resultSelector);\r\n        return e;\r\n    };\r\n    if (List)\r\n        List.prototype.zip = Enumerable.prototype.zip;\r\n}"],"sourceRoot":"/source/"}